{"version":3,"sources":["webpack://redstone-architect/./src/redstone.png","webpack://redstone-architect/./node_modules/gl-matrix/esm/common.js","webpack://redstone-architect/./node_modules/gl-matrix/esm/mat2.js","webpack://redstone-architect/./node_modules/gl-matrix/esm/mat2d.js","webpack://redstone-architect/./node_modules/gl-matrix/esm/mat3.js","webpack://redstone-architect/./node_modules/gl-matrix/esm/mat4.js","webpack://redstone-architect/./node_modules/gl-matrix/esm/vec3.js","webpack://redstone-architect/./node_modules/gl-matrix/esm/vec4.js","webpack://redstone-architect/./node_modules/gl-matrix/esm/quat.js","webpack://redstone-architect/./node_modules/gl-matrix/esm/quat2.js","webpack://redstone-architect/./node_modules/gl-matrix/esm/vec2.js","webpack://redstone-architect/./src/cursor_frag.glsl","webpack://redstone-architect/./src/cursor_vert.glsl","webpack://redstone-architect/./src/dust_frag.glsl","webpack://redstone-architect/./src/dust_vert.glsl","webpack://redstone-architect/./src/hotbar_frag.glsl","webpack://redstone-architect/./src/hotbar_vert.glsl","webpack://redstone-architect/./src/test_frag.glsl","webpack://redstone-architect/./src/test_vert.glsl","webpack://redstone-architect/./src/blocks.ts","webpack://redstone-architect/./src/cursor.ts","webpack://redstone-architect/./src/directions.ts","webpack://redstone-architect/./src/examples.ts","webpack://redstone-architect/./src/grid.ts","webpack://redstone-architect/./src/input.ts","webpack://redstone-architect/./src/materials.ts","webpack://redstone-architect/./src/models.ts","webpack://redstone-architect/./src/render.ts","webpack://redstone-architect/./src/shader.ts","webpack://redstone-architect/./src/simulator.ts","webpack://redstone-architect/./src/tuples.ts","webpack://redstone-architect/./src/util.ts","webpack://redstone-architect/webpack/bootstrap","webpack://redstone-architect/webpack/runtime/define property getters","webpack://redstone-architect/webpack/runtime/hasOwnProperty shorthand","webpack://redstone-architect/webpack/runtime/make namespace object","webpack://redstone-architect/./src/index.ts"],"names":["EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","create","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","hypot","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","y","i","arguments","length","sqrt","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","t","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","mag","cosine","acos","zero","vec","div","dist","sqrDist","sqrLen","forEach","stride","offset","count","fn","arg","l","dot","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","log","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","rotationTo","sqlerp","setAxes","view","dq","w1","fromRotationTranslationValues","outer","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","genUpdateNeighbors","range","grid","coords","state","simulator","queueBlockUpdate","blockIdCounter","init","this","vao","gl","createVertexArray","vbo","createBuffer","ebo","vert","initShader","testVertSrc","VERTEX_SHADER","frag","testFragSrc","FRAGMENT_SHADER","program","initProgram","loc_mvp","getUniformLocation","loc_alpha","bindVertexArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","enableVertexAttribArray","uploadCombinedModel","model","bufferData","vertexData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","indices","nElements","renderCombinedModel","info","alpha","useProgram","uniformMatrix4fv","mvp","uniform1f","drawElements","TRIANGLES","UNSIGNED_INT","materialRegistry","DefaultMaterialRenderer","dustVertSrc","dustFragSrc","DustMaterialRenderer","solidBlockRenderer","materialName","nModels","render","block","mat4","extraData","useUvs","Model","use","models","texturedCube","nPerVertex","data","ModelCombiner","addModel","redstoneDustRenderer","wireTexture","wireRotation","nConnections","bit","e","n","verticalWireW","verticalWireE","verticalWireN","verticalWireS","faceTexture","faceRotation","power","colorMultiplier","slabRenderer","torchRenderer","mountedDir","blocks","torch","getMountedDirection","down","yRotation","west","east","north","half","vec3","uvs","isEnabled","sideTexture","topTexture","ONE_BLOCK_TAXICAB","TWO_BLOCKS_TAXICAB","taxicabDist","push","blockRegistry","stone","id","renderer","solidFaces","DirectionMap","weduns","getPlacedState","updateNeighbors","handleNeighborUpdate","DUST_Y_ORDER","dust","attractsWires","isTransparent","mountingDirections","hotbarState","getPower","alsoUpdate","dir","dirBit","dirVec","wens","Grid","getN","oldState","newState","anyConnection","temp","inBounds","connectionCase1","connectionCase2","pinchBlock","getBlockN","onBlock","preventDownwardsTransmission","getStrongPower","getStateN","isFacing","direction","checkCardinalVector","slab","mountingDirection","mountedCoords","isPowered","getWeakPower","existingQTick","getScheduledQTick","customData","tryCancelQTick","tryScheduleQTick","_onQTickCompleted","value","south","qtick","trySetState","location","byId","allowNull","Error","cursor","_vao","_vbo","_ebo","_program","_loc_mvp","_loc_cursorPos","_loc_cursorSize","_loc_time","_loc_renderFaces","_renderFaces","vd","glModel","cursorVertSrc","cursorFragSrc","cursorPos","cursorSize","disable","DEPTH_TEST","CULL_FACE","uniform3f","time","uniform1fv","enable","setShowFace","faceDirection","show","index","showAllFaces","sign","none","wensdu","xwensdu","wensu","directionList","values","query","dir1","dir2","arrContains","arr","scenarios","resize","doGameTick","generate","off","includeTorch","loadScenario","scenarioName","scenario","Simulator","new","size","_sizeCheck","_createData","isDirty","onSet","newMin","newMax","newSize","newData","mins","maxs","xyz","_inBounds","oldI","newI","_index","get","_get","_boundsCheck","oldBlock","requireBlock","console","error","trackKeys","keycode","String","fromCharCode","keyPressed","keyDown","keyWasPressed","handleKeydown","indexOf","code","altKey","ctrlKey","metaKey","preventDefault","handleKeyup","input","window","addEventListener","update","_registry","createRenderer","transform","flip","vertices","expectedAmount","gotAmount","step","outVerts","Uint32Array","from","dataPerVertex","cube","ii","torchShiftTemp","vert0","vert1","vert2","vert3","shiftX","shiftY","shiftZ","triangle","quad","_modelBuffer","_totalVertices","_totalIndices","self","combine","vertexDataIndex","indicesIndex","modelStartVertex","clear","splice","_materials","_materialKeys","updateModels","planeNormal","planeStart","planeEnd","minX","maxX","minY","maxY","minZ","maxZ","matName","combiner","LayerRenderer","ALPHA_REGRESSION","_layers","_facingAxis","_centerPos","fadeLayers","setCamera","facingAxis","centerPos","LayeredGridRenderer","hotbarVertSrc","hotbarFragSrc","_prog","_loc_screenDimensions","_loc_uiPosition","_loc_cellParameters","_loc_selectTime","screenWidth","screenHeight","posX","posY","cellSize","cellSpacing","padding","selectedIndex","timeSinceSelected","uniform2f","uniform4f","hotbarBlocks","_ui","HotbarInterfaceRenderer","_renderers","_rotations","matRenderer","deltaTime","selectedBlock","previousBlock","selectedBlockTime","all_yOffset","clamp","all_startX","all_size","all_startY","ui_padding","cam","proj","selected","wasSelected","selectTransition","_generateTransition","selectTransition2","rotation","normalizeRad","scaleBlock","sizeX","sizeY","adjust","renderInfo","sinceTime","speed","HotbarRenderer","textureIndex","outIndex","u0","uA","vA","uB","vB","uC","vC","uD","vD","name","src","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","split","reduce","line","slice","alert","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","isFree","QTick","_data","Map","_hash","getOrCreate","key","qt","updateOrder","needsSet","setPostPlacement","BlockUpdate","installHooks","activeQticks","LinkedList","qtickGrid","QTickGrid","sortedQticks","tickCount","blockUpdatePool","blockUpdateLength","tempVec3","tempOut","undefined","_installGridHooks","iterator","hasNext","tick","next","delay","remove","sort","priority","onCompleted","_doRedstoneTick","bu","newBlock","_isOpaque","below","belowBlock","torchState","initialCapacity","_startIndex","_lastIndexExclusive","internalIndex","_resize","popHead","oldHead","minimumCapacity","newCapacity","GuillotineArray","onRemove","node","_setup","head","special","prev","_length","tail","it","LinkedListIterator","_indexCheck","newNode","adjacentPositions","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","call","definition","Object","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","canvasWrapper","canvas","canvasResized","maximizeCanvas","offsetWidth","offsetHeight","onload","document","querySelectorAll","scrollToName","href","substring","setAttribute","scrollToElement","getElementById","querySelector","scrollTop","offsetTop","highlightClass","classList","style","animation","bodyClasses","getElementsByTagName","ResizeObserver","observe","getContext","clearColor","cullFace","BACK","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","texture","createTexture","rotationAxis","modelMat","projMat","cameraMat","mvpMat","CAMERA_SHIFT","CAM_ROTATE_X_2","animationStartTime","highlightBlock","highlightBlockStart","highlightBlockAnimated","camTiltX","camTiltXStart","camTiltXAnimated","camTiltY","camTiltYStart","camTiltYAnimated","camYaw","camYawStart","camYawAnimated","VEC3_HALF","previousSelectedBlock","selectFaceMode","result","sGrid","sSim","lgr","totalTime","lastTimestamp","hotbarRenderer","placeBlock","checkValidMountPoint","adjacentBlock","movementInput","gameTickCountdown","loop","timestamp","requestAnimationFrame","delta","keyA","keyD","keyS","keyW","keyQ","keyE","keyShift","keyEscape","rotated","isPlaceInput","hasMovementInput","moved","isValidMountDirection","isValidMountPoint","currentBlock","md","filter","mountedDirection","removeBlock","processInput","viewport","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","bindTexture","TEXTURE_2D","image","Image","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","performance","now"],"mappings":"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","file":"src.bundle.js","sourcesContent":["export default \"6797bfe95a3a7584105f4ebcc7511b44.png\";","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {ReadonlyMat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {ReadonlyMat2} L the lower triangular matrix\r\n * @param {ReadonlyMat2} D the diagonal matrix\r\n * @param {ReadonlyMat2} U the upper triangular matrix\r\n * @param {ReadonlyMat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q a normalized quaternion\r\n * @param {ReadonlyVec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyVec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {ReadonlyMat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quaternion.\r\n * @param {ReadonlyQuat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quat.\r\n * @param {ReadonlyQuat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","export default \"#version 300 es\\n#define GLSLIFY 1\\n\\nout highp vec4 FragColor;\\n\\nin highp vec2 uv;\\n\\nuniform highp float time;\\nuniform sampler2D tex;\\n\\nvoid main()\\n{\\n    FragColor = texture(tex, uv * 0.125);\\n    FragColor.a = sin(time * 12.0) * 0.025 + 0.2;\\n}\";","export default \"#version 300 es\\n#define GLSLIFY 1\\n\\nlayout (location = 0) in vec3 aPos;\\nlayout (location = 1) in vec2 aUv;\\nlayout (location = 2) in float faceNum;\\n\\nuniform mat4 mvp;\\nuniform vec3 cursorPos;\\nuniform float cursorSize;\\nuniform float renderFaces[6];\\n\\nout highp vec2 uv;\\n\\nvoid main()\\n{\\n    gl_Position = mvp * vec4((aPos - 0.5) * cursorSize + 0.5 + cursorPos, 1.0);\\n    uv = aUv;\\n\\n    float shouldShowFace = renderFaces[int(faceNum)];\\n    gl_Position *= shouldShowFace;\\n}\\n\";","export default \"#version 300 es\\n// Special texture sampling algorithm that avoids texture-atlas artifacts by\\n// avoiding sampling UVs that are closer than 0.5 pixels to the edge\\n\\nprecision highp float;\\n\\nvec4 texSample(sampler2D s, vec2 uv)\\n{\\n    vec2 localUv = uv - floor(uv);\\n    vec2 intUv = floor(uv);\\n\\n    // This represents the size in pixels of each individual block texture in the atlas\\n    // Change this if we ever resize the textures!!!\\n    float CELL_SIZE = 8.0;\\n\\n    float clampTo = 0.5 / CELL_SIZE;\\n    localUv = clamp(localUv, clampTo, 1.0 - clampTo);\\n\\n    vec4 col = texture(s, (localUv + intUv) * 0.125);\\n\\n    // TODO Render transparent blocks in another pass to reduce discards\\n    if (col.a < 0.1) discard;\\n    return col;\\n}\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nin vec2 uv;\\nin float power;\\n\\nuniform float alpha;\\nuniform sampler2D tex;\\n\\nout vec4 FragColor;\\n\\nvoid main()\\n{\\n    FragColor = texSample(tex, uv);\\n    FragColor.rgb *= power;\\n    FragColor.a *= alpha;\\n}\\n\";","export default \"#version 300 es\\n#define GLSLIFY 1\\nlayout (location = 0) in vec3 aPos;\\nlayout (location = 1) in vec2 aUv;\\nlayout (location = 2) in float aPower;\\n\\nuniform mat4 mvp;\\n\\nout vec2 uv;\\nout float power;\\n\\nvoid main()\\n{\\n    gl_Position = mvp * vec4(aPos, 1.0);\\n    uv = aUv;\\n    power = aPower;\\n}\\n\";","export default \"#version 300 es\\n\\nprecision lowp float;\\n#define GLSLIFY 1\\n\\nout vec4 FragColor;\\n\\nuniform highp vec4 uiPosition;\\nuniform highp vec4 cellParameters;\\nuniform highp float selectTime;\\n\\nvoid main()\\n{\\n    float u_left = uiPosition.x;\\n    float u_bottom = uiPosition.y;\\n    float u_width = uiPosition.z;\\n    float u_height = uiPosition.w;\\n\\n    float u_cellSize = cellParameters.x;\\n    float u_cellSpacing = cellParameters.y;\\n    float u_padding = cellParameters.z;\\n    float u_selectedIndex = cellParameters.w;\\n\\n    float s = u_cellSize+u_cellSpacing;\\n\\n    float ncells = floor( (u_width - 2.0*u_padding + u_cellSpacing)/s );\\n\\n    vec2 off = gl_FragCoord.xy - vec2(u_left,u_bottom) - vec2(u_padding);\\n    float cellIndex = floor( off.x/s );\\n    // This variable is unused for now, but could be useful for reference\\n    bool inCell = (cellIndex >= 0.0 && off.x-cellIndex*s < u_cellSize &&\\n        cellIndex < ncells &&\\n        off.y >= 0.0 && off.y <= u_cellSize);\\n\\n    vec4 col_yellow = vec4(0.90, 0.82, 0.20, 1.0);\\n    vec4 col_blue   = vec4(0.20, 0.73, 0.90, 1.0);\\n\\n    // Usually a nice yellow color, but change to a blue color behind a selected object\\n    float bgTransition = clamp(selectTime*6.0, 0.0, 1.0);\\n    FragColor = mix(col_yellow, col_blue, float(\\n        abs(u_selectedIndex-cellIndex) < 0.01 &&    // u_selectedCellIndex == (the cellIndex of this pixel)\\n        off.x-cellIndex*s < u_cellSize &&           // pixel is not in the padding region of the cell\\n        abs(off.y - u_cellSize*0.5) < u_height*bgTransition\\n        ));\\n}\\n\";","export default \"#version 300 es\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nlayout (location = 0) in vec3 aPos;\\n\\nuniform vec2 screenDimensions;\\nuniform vec4 uiPosition;\\n\\nvoid main()\\n{\\n    vec2 offsetXY = uiPosition.xy / screenDimensions;\\n    vec2 scaleXY = uiPosition.zw / screenDimensions;\\n    vec2 xy = offsetXY + aPos.xy*scaleXY;\\n    gl_Position = vec4(2.0*xy - 1.0, 0.0, 1.0);\\n}\\n\";","export default \"#version 300 es\\n// Special texture sampling algorithm that avoids texture-atlas artifacts by\\n// avoiding sampling UVs that are closer than 0.5 pixels to the edge\\n\\nprecision highp float;\\n\\nvec4 texSample(sampler2D s, vec2 uv)\\n{\\n    vec2 localUv = uv - floor(uv);\\n    vec2 intUv = floor(uv);\\n\\n    // This represents the size in pixels of each individual block texture in the atlas\\n    // Change this if we ever resize the textures!!!\\n    float CELL_SIZE = 8.0;\\n\\n    float clampTo = 0.5 / CELL_SIZE;\\n    localUv = clamp(localUv, clampTo, 1.0 - clampTo);\\n\\n    vec4 col = texture(s, (localUv + intUv) * 0.125);\\n\\n    // TODO Render transparent blocks in another pass to reduce discards\\n    if (col.a < 0.1) discard;\\n    return col;\\n}\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nout highp vec4 FragColor;\\n\\nin highp vec2 uv;\\n\\nuniform highp float alpha;\\nuniform sampler2D tex;\\n\\nvoid main()\\n{\\n    FragColor = texSample(tex, uv);\\n    FragColor.a *= alpha;\\n}\\n\";","export default \"#version 300 es\\n#define GLSLIFY 1\\nlayout (location = 0) in vec3 aPos;\\nlayout (location = 1) in vec2 aUv;\\n\\nuniform mat4 mvp;\\n\\nout vec2 uv;\\n\\nvoid main()\\n{\\n    gl_Position = mvp * vec4(aPos, 1.0);\\n    uv = aUv;\\n}\";","import { vec3, mat4, ReadonlyVec3 } from 'gl-matrix';\nimport { Grid } from './grid';\nimport { GLModel, Model, models } from './models';\nimport { BlockRenderer, MaterialRenderer, ModelCombiner, GLRenderInfo, useUvs } from './render';\nimport { initShader, initProgram } from './shader';\nimport { materialRegistry } from './materials';\nimport { Simulator, BlockUpdate, QTick, getStrongPower, getWeakPower } from './simulator';\nimport directions, { DirectionMap } from './directions';\n\ndeclare var gl: WebGL2RenderingContext;\n\nconst { abs, min, max } = Math;\n\n/** Defines a type of block. There is one instance of these per TYPE of block (not per block added to the grid). */\nexport interface Block {\n    id: number;\n    renderer: BlockRenderer;\n    attractsWires?: boolean;\n    /**\n     * If true, power can travel through wires up onto this block, but not down from this block.\n     * Visible in slabs and glowstone.\n     */\n    preventDownwardsTransmission?: boolean;\n    isTransparent?: boolean;\n    solidFaces: DirectionMap;\n    /**\n     * If this block must be mounted on another block, this should be a list of all possible\n     * directions for it to be mounted from. E.g. for redstone dust, this would be `[directions.down]`.\n     * If the block doesn't need to be attached to another block this can be null.\n     */\n    mountingDirections?: readonly ReadonlyVec3[];\n    /**\n     * The state of the block when shown in the hotbar. If not specified, it will be 0.\n     */\n    hotbarState?: number;\n    /**\n     * Given the block state, return the block power from 0 to 15.\n     * This method is optional, if it does not exist the block power is assumed to be zero.\n     * Note that blocks can also be \"strongly powered\", e.g. by a redstone repeater facing into\n     * the block; this method does not check for that condition\n     */\n    getPower?: ((state: number) => number) | null;\n    /**\n     * Called when this block is placed, destroyed, or updated. The block should call\n     * Simulator.queueNeighborUpdate() to update its neighbors. For most blocks, this is not a complex method\n     * and an implementation generated with genUpdateNeighbors().\n     */\n    updateNeighbors(grid: Grid, coords: vec3, state: number, simulator: Simulator);\n    handleNeighborUpdate(grid: Grid, coords: vec3, state: number, simulator: Simulator);\n    /**\n     * Return the initial state of the block when it is placed.\n     * @param mountingDirection if the block must be mounted on another block, as indicated by\n     * Block.mountingDirections, this is the direction that it was mounted. If it doesn't need to\n     * be mounted this will be null\n     */\n    getPlacedState(mountingDirection: ReadonlyVec3 | null): number;\n    /**\n     * Return the direction that this block is mounted from.\n     * @param state the current state of the block\n     */\n    getMountedDirection?(state: number): ReadonlyVec3 | null;\n}\n\nconst genUpdateNeighbors = (range: ReadonlyVec3[]) => (grid: Grid, coords: vec3, state: number, simulator: Simulator) => {\n    simulator.queueBlockUpdate().set(coords, range);\n};\n\nlet blockIdCounter = 0;\nlet renderIdCounter = 0;\n\nclass DefaultMaterialRenderer implements MaterialRenderer {\n    vao: WebGLVertexArrayObject;\n    vbo: WebGLBuffer;\n    ebo: WebGLBuffer;\n    program: WebGLProgram;\n    loc_mvp: WebGLUniformLocation;\n    loc_alpha: WebGLUniformLocation;\n    nElements: number;\n\n    materialName: 'default';\n\n    constructor() {\n    }\n\n    init() {\n        this.vao = gl.createVertexArray();\n        this.vbo = gl.createBuffer();\n        this.ebo = gl.createBuffer();\n\n        const vert = initShader('test_vert', testVertSrc, gl.VERTEX_SHADER);\n        const frag = initShader('test_frag', testFragSrc, gl.FRAGMENT_SHADER);\n        this.program = initProgram(vert, frag);\n        this.loc_mvp = gl.getUniformLocation(this.program, 'mvp');\n        this.loc_alpha = gl.getUniformLocation(this.program, 'alpha');\n\n        gl.bindVertexArray(this.vao);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\n        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 20, 0);\n        gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 20, 12);\n        gl.enableVertexAttribArray(0);\n        gl.enableVertexAttribArray(1);\n    }\n\n    uploadCombinedModel(model: GLModel) {\n        gl.bindVertexArray(this.vao);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\n        gl.bufferData(gl.ARRAY_BUFFER, model.vertexData, gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ebo);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, model.indices, gl.STATIC_DRAW);\n        this.nElements = model.indices.length;\n    }\n\n    renderCombinedModel(info: GLRenderInfo, alpha: number) {\n        gl.bindVertexArray(this.vao);\n        gl.useProgram(this.program);\n        gl.uniformMatrix4fv(this.loc_mvp, false, info.mvp);\n        gl.uniform1f(this.loc_alpha, alpha);\n        gl.drawElements(gl.TRIANGLES, this.nElements, gl.UNSIGNED_INT, 0);\n    }\n}\nmaterialRegistry.add('default', () => new DefaultMaterialRenderer());\n\nclass DustMaterialRenderer implements MaterialRenderer {\n    vao: WebGLVertexArrayObject;\n    vbo: WebGLBuffer;\n    ebo: WebGLBuffer;\n    program: WebGLProgram;\n    loc_mvp: WebGLUniformLocation;\n    loc_alpha: WebGLUniformLocation;\n    nElements: number;\n\n    materialName: 'dust';\n\n    constructor() {\n    }\n\n    init() {\n        this.vao = gl.createVertexArray();\n        this.vbo = gl.createBuffer();\n        this.ebo = gl.createBuffer();\n\n        const vert = initShader('dust_vert', dustVertSrc, gl.VERTEX_SHADER);\n        const frag = initShader('dust_frag', dustFragSrc, gl.FRAGMENT_SHADER);\n        this.program = initProgram(vert, frag);\n        this.loc_mvp = gl.getUniformLocation(this.program, 'mvp');\n        this.loc_alpha = gl.getUniformLocation(this.program, 'alpha');\n\n        gl.bindVertexArray(this.vao);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\n        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 24, 0);\n        gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 24, 12);\n        gl.vertexAttribPointer(2, 1, gl.FLOAT, false, 24, 20);\n        gl.enableVertexAttribArray(0);\n        gl.enableVertexAttribArray(1);\n        gl.enableVertexAttribArray(2);\n    }\n\n    uploadCombinedModel(model: GLModel) {\n        gl.bindVertexArray(this.vao);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\n        gl.bufferData(gl.ARRAY_BUFFER, model.vertexData, gl.STATIC_DRAW);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ebo);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, model.indices, gl.STATIC_DRAW);\n        this.nElements = model.indices.length;\n    }\n\n    renderCombinedModel(info: GLRenderInfo, alpha: number) {\n        gl.bindVertexArray(this.vao);\n        gl.useProgram(this.program);\n        gl.uniformMatrix4fv(this.loc_mvp, false, info.mvp);\n        gl.uniform1f(this.loc_alpha, alpha);\n        gl.drawElements(gl.TRIANGLES, this.nElements, gl.UNSIGNED_INT, 0);\n    }\n}\nmaterialRegistry.add('dust', () => new DustMaterialRenderer());\n\nconst solidBlockRenderer: BlockRenderer = {\n    materialName: 'default',\n    nModels: 1,\n    render: (grid, coords, block, state, out) => {\n        const mat = mat4.create();\n        mat4.translate(mat, mat, coords);\n\n        const extraData = [];\n        for (let i = 0; i < 6; i++) {\n            useUvs(0, extraData, i * 8);\n        }\n\n        const model = Model.use(models.texturedCube, { nPerVertex: 2, data: extraData },\n            mat);\n        ModelCombiner.addModel(out, model);\n    }\n};\n\nconst WIRE_TEXTURE_PLUS = 2;\nconst WIRE_TEXTURE_LINE = 3; // Unrotated is from -X to +X\nconst WIRE_TEXTURE_LINE_2 = 7; // Unrotated is from -Z to +Z\nconst WIRE_TEXTURE_CORNER = 4; // Unrotated is from -X to -Z\nconst WIRE_TEXTURE_3WAY = 5; // Unrotated is from -X, -Z, and +X\nconst WIRE_TEXTURE_DOT = 6;\n\nconst redstoneDustRenderer: BlockRenderer = {\n    materialName: 'dust',\n    nModels: 1,\n    render: (grid, coords, block, state, out) => {\n        // Figure out which texture to use for the dust\n        let wireTexture: number;\n        let wireRotation: number; // in degrees\n\n        // Count connections\n        let nConnections = 0;\n        for (let bit = 4; bit <= 7; bit++)\n            if (state & (1 << bit))\n                nConnections++;\n\n        // Handy variables\n        const w = !!(state & 0x80);\n        const e = !!(state & 0x40);\n        const n = !!(state & 0x20);\n        const s = !!(state & 0x10);\n\n        // Determine the shape and orientation of our texture\n        if (nConnections === 0) {\n            // 0 connections: Plus or dot\n            const isDot = !!(state & 0x1000);\n            wireTexture = isDot ? WIRE_TEXTURE_DOT : WIRE_TEXTURE_PLUS;\n        } else if (nConnections === 1) {\n            // 1 connection: Line\n            wireTexture = (e || w) ? WIRE_TEXTURE_LINE : WIRE_TEXTURE_LINE_2;\n        } else if (nConnections === 2) {\n            // 2 connections: Line or corner\n            if (w && e) {\n                wireTexture = WIRE_TEXTURE_LINE;\n            } else if (n && s) {\n                wireTexture = WIRE_TEXTURE_LINE; wireRotation = 90;\n            } else {\n                wireTexture = WIRE_TEXTURE_CORNER;\n                // 4 possible ways the corner can go\n                if (s && w) wireRotation = 90;\n                else if (s && e) wireRotation = 180;\n                else if (n && e) wireRotation = 270; // case for rotation=0 handled by default\n            }\n        } else if (nConnections === 3) {\n            // 3 connections: T shape\n            wireTexture = WIRE_TEXTURE_3WAY;\n            if (!e) wireRotation = 90;\n            else if (!n) wireRotation = 180;\n            else if (!w) wireRotation = 270; // case for rotation=0 handled by default\n        } else {\n            // 4 connections: Plus\n            wireTexture = WIRE_TEXTURE_PLUS;\n        }\n\n        // Determine whether to render wires on the sides of adjacent blocks\n        const verticalWireW = !!(state & 0x800);\n        const verticalWireE = !!(state & 0x400);\n        const verticalWireN = !!(state & 0x200);\n        const verticalWireS = !!(state & 0x100);\n\n        // Do normal render stuff\n        const translateUp = 0.05;\n        const mat = mat4.create();\n        mat4.translate(mat, mat, coords);\n        mat4.translate(mat, mat, [0.005, translateUp, 0.005]);\n        mat4.scale(mat, mat, [0.99, 1 - translateUp, 0.99]);\n        \n        const extraData = [];\n        // Add UVs to extraData\n        for (let i = 0; i < 6; i++) {\n            let faceTexture = 64;\n            if (i === 5) faceTexture = wireTexture;\n            else if (i === 1 && verticalWireW) faceTexture = WIRE_TEXTURE_LINE_2;\n            else if (i === 2 && verticalWireE) faceTexture = WIRE_TEXTURE_LINE_2;\n            else if (i === 3 && verticalWireN) faceTexture = WIRE_TEXTURE_LINE_2;\n            else if (i === 4 && verticalWireS) faceTexture = WIRE_TEXTURE_LINE_2;\n            const faceRotation = (i === 5) ? wireRotation : 0;\n            useUvs(faceTexture, extraData, i * 12, faceRotation, 3);\n        }\n        // Add power attribute to extraData\n        const power = state & 0xF;\n        const colorMultiplier = power ? ((power / 15) * 0.7 + 0.3) : 0.1;\n        for (let i = 0; i < 24; i++)\n            extraData[i * 3 + 2] = colorMultiplier;\n\n        const model = Model.use(models.texturedCube, { nPerVertex: 3, data: extraData }, mat, true);\n        ModelCombiner.addModel(out, model);\n    },\n};\n\nconst slabRenderer: BlockRenderer = {\n    materialName: 'default',\n    nModels: 1,\n    render: (grid, coords, block, state, out) => {\n        const mat = mat4.create();\n        mat4.translate(mat, mat, coords);\n        mat4.translate(mat, mat, [0, 0.5, 0]);\n        mat4.scale(mat, mat, [1, 0.5, 1]);\n\n        const extraData = [];\n        for (let i = 0; i < 6; i++) useUvs(0, extraData, i * 8);\n\n        const model = Model.use(models.texturedCube, { nPerVertex: 2, data: extraData }, mat);\n        ModelCombiner.addModel(out, model);\n    }\n};\n\nconst torchRenderer: BlockRenderer = {\n    materialName: 'default',\n    nModels: 1,\n    render: (grid, coords, block, state, out) => {\n        const mat = mat4.create();\n        mat4.translate(mat, mat, coords);\n\n        const mountedDir = blocks.torch.getMountedDirection(state);\n        if (mountedDir !== directions.down) {\n            let yRotation;\n            if (mountedDir === directions.west) yRotation = 0;\n            else if (mountedDir === directions.east) yRotation = 180;\n            else if (mountedDir === directions.north) yRotation = 270;\n            else yRotation = 90;\n            const half: vec3 = [0.5, 0.5, 0.5];\n            mat4.translate(mat, mat, half);\n\n            mat4.rotateY(mat, mat, yRotation * 0.0174532925);\n            mat4.translate(mat, mat, [-0.3, 0, 0]);\n            mat4.rotateZ(mat, mat, -0.479965544);\n            mat4.rotateY(mat, mat, yRotation * -0.0174532925);\n            vec3.negate(half, half);\n            mat4.translate(mat, mat, half);\n        }\n        \n        const uvs = [];\n        const isEnabled = blocks.torch.isEnabled(state);\n        const sideTexture = isEnabled ? 8 : 11;\n        const topTexture = isEnabled ? 9 : 12;\n        for (let i = 0; i < 6; i++) {\n            let faceTexture = sideTexture;\n            if (i === 0) faceTexture = topTexture;\n            else if (i === 5) faceTexture = 10; // bottom texture\n            useUvs(faceTexture, uvs, i*8);\n        }\n\n        const model = Model.use(models.torch, { nPerVertex: 2, data: uvs }, mat);\n        ModelCombiner.addModel(out, model);\n    }\n};\n\nconst ONE_BLOCK_TAXICAB: ReadonlyVec3[] = [];\nconst TWO_BLOCKS_TAXICAB: ReadonlyVec3[] = [];\nfor (let x = -2; x <= 2; x++) {\n    for (let y = -2; y <= 2; y++) {\n        for (let z = -2; z <= 2; z++) {\n            const taxicabDist = abs(x) + abs(y) + abs(z);\n            if (taxicabDist === 0) continue;\n            const vec = vec3.fromValues(x, y, z);\n            if (taxicabDist <= 1) ONE_BLOCK_TAXICAB.push(vec);\n            if (taxicabDist <= 2) TWO_BLOCKS_TAXICAB.push(vec);\n        }\n    }\n}\n\nconst blockRegistry: Block[] = [];\n\nconst stone: Block = {\n    id: ++blockIdCounter,\n    renderer: solidBlockRenderer,\n    solidFaces: new DirectionMap(directions.weduns),\n    getPlacedState: () => 0,\n    updateNeighbors: genUpdateNeighbors(ONE_BLOCK_TAXICAB),\n    handleNeighborUpdate: () => {}\n}; blockRegistry[blockIdCounter] = stone;\n\n// Redstone dust state:\n// Redstone dust has 2 different parts to its state:\n// 1) Signal strength, 0-15. This is stored in the 4 least significant bits, mask 0xF.\n// 2) Connected ness. Wire can be connected in a line, T, cross, or none. When disconnected\n// can be set to either a cross shape or a dot shape. This is stored in the next 5 significant\n// bits, mask 0x1FF0. (Counting from MSB to LSB:) First bit is cross(0) or dot(1), relevant only\n// when disconnected (ie. other bits mask 0xF0 are 0). The next 4 bits (mask 0xF00) are whether\n// the wire is travelling up a block to the west(-X), east(+X), north(-Z), or south(+Z), respectively.\n// The other 4 bits (mask 0xF0) are whether the wire is connected to the west, east, north, south\n// respectively.\ninterface BlockDust extends Block {\n    isFacing: (state: number, direction: vec3) => boolean;\n}\nconst DUST_Y_ORDER = [0, -1, 1];\nconst dust: BlockDust = {\n    id: ++blockIdCounter,\n    renderer: redstoneDustRenderer,\n    attractsWires: true,\n    isTransparent: true,\n    solidFaces: new DirectionMap([]),\n    mountingDirections: [directions.down],\n    hotbarState: 0xB,\n    getPlacedState: () => 0,\n    getPower: (state: number) => state & 0xF,\n    updateNeighbors: (grid: Grid, coords: vec3, state: number, simulator: Simulator) => {\n        // Send updates within a 2-block taxicab distance, but also send updates to the blocks\n        // above and below any non-wire blocks that the dust is pointing to\n        simulator.queueBlockUpdate().set(coords, TWO_BLOCKS_TAXICAB);\n\n        // Search in each direction, if we are facing into a block there and it's not a wire\n        // block, then send an update that way\n        // TODO Test if this works!\n        let alsoUpdate: vec3[] = null;\n        let out: [Block, number] = null;\n        for (let dir = 0; dir < 4; dir++) {\n            const dirBit = 7 - dir;\n            const dirVec = directions.wens[dir];\n            const isFacingDirection = !!(state & (1 << dirBit));\n            if (isFacingDirection) {\n                // Check if we're facing a block here and that block is not redstone dust\n                const vec = vec3.create();\n                vec3.add(vec, coords, dirVec);\n                out = out || [null, 0];\n                Grid.getN(grid, vec, out);\n                if (!out[0] || out[0] == blocks.dust) continue;\n\n                // Update up neighbor\n                alsoUpdate = alsoUpdate || [];\n                vec3.add(vec, vec, directions.up);\n                alsoUpdate.push(vec3.clone(vec));\n\n                // Update down neighbor\n                vec3.add(vec, vec, directions.down);\n                vec3.add(vec, vec, directions.down);\n                alsoUpdate.push(vec);\n            }\n        }\n        if (alsoUpdate)\n            simulator.queueBlockUpdate().set(coords, alsoUpdate);\n    },\n    handleNeighborUpdate: (grid: Grid, coords: vec3, oldState: number, simulator: Simulator) => {\n        const out: [Block, number] = [null, 0]; // used later for getting blocks\n\n        // Check connectedness\n        let newState = 0;\n        let anyConnection = false;\n        let power = 0;\n\n        // Search for possible connections and set bits corresponding to the direction of\n        // that neighbor. First search the same level, then the next level\n        const temp = vec3.create();\n        for (let iy = 0; iy < DUST_Y_ORDER.length; iy++) {\n            const y = DUST_Y_ORDER[iy];\n            for (let i = 0; i < directions.wens.length; i++) {\n                // Calculate offset coordinate\n                const dir = directions.wens[i];\n                vec3.add(temp, coords, dir);\n                if (y === -1) vec3.add(temp, temp, directions.down);\n                if (y === 1) vec3.add(temp, temp, directions.up);\n\n                // If there is a block that the wire can connect to here, set the bit for this direction\n                // Otherwise, the bit is already unset, so we don't need to do anything\n                if (!Grid.inBounds(grid, temp)) continue;\n                Grid.getN(grid, temp, out);\n                if (!out[0]) continue;\n                // Wire can connect to the block in 2 cases:\n                // 1) Wire and block are on the same level and block has \"attractsWires\" set to true\n                // 2) Wire and block are on different levels, but the block in question is another wire\n                const connectionCase1 = (y === 0) && !!out[0].attractsWires;\n                const connectionCase2 = (y !== 0) && out[0] === blocks.dust;\n                if (!connectionCase1 && !connectionCase2) continue;\n\n                // \"Pinching\" - wires can't connect up/down if there's a block \"pinching\" the connection\n                // like so:\n                // rB\n                // Br   B=Solid block   R=redstone\n                // Also handle the \"slab rule\" I.e. no downwards transmission of power from slabs\n                if (y === 1) {\n                    // When going up: wire is pinched if there's a block above it\n                    vec3.add(temp, coords, directions.up);\n                    const pinchBlock = Grid.getBlockN(grid, temp);\n                    if (pinchBlock && !pinchBlock.isTransparent)\n                        continue;\n                } else if (y === -1) {\n                    // When going down: wire is pinched if there's a block on the adjacent side\n                    vec3.add(temp, coords, dir);\n                    const pinchBlock = Grid.getBlockN(grid, temp);\n                    if (pinchBlock && !pinchBlock.isTransparent)\n                        continue;\n                    \n                    // Some blocks (e.g. slabs) prevent power from travelling donwards\n                    // TODO This is important!!!\n                    // If going up to a wire that is on a slab, we need to VISUALLY not show\n                    // the vertical line but still allow power to travel up\n                    vec3.add(temp, coords, directions.down);\n                    const onBlock = Grid.getBlockN(grid, temp);\n                    if (onBlock && onBlock.preventDownwardsTransmission)\n                        continue;\n                }\n\n                // The wire can connect here, set the corresponding bit\n                const bit = 7 - i;\n                newState |= (1 << bit);\n                anyConnection = true;\n\n                // Check power from adjacent redstone dust\n                // TODO Better powering-- support pinching, slab rule\n                if (out[0] === blocks.dust) power = max(power, out[0].getPower(out[1]) - 1);\n\n                // If y is 1, also set the \"up-one bit\"\n                // But not if the connecting wire is on a slab\n                if (y === 1) {\n                    vec3.add(temp, coords, dir);\n                    const onBlock = Grid.getBlockN(grid, temp);\n                    if (!onBlock || !onBlock.preventDownwardsTransmission)\n                        newState |= (1 << (11 - i));\n                }\n            }\n        }\n\n        // If there is a connection, plus/dot bit should be zero, otherwise keep it the same as before\n        const plusDotValue = anyConnection ? 0 : (oldState & 0x1000);\n        newState |= plusDotValue;\n\n        // Check for strong powering or power source\n        for (let i = 0; i < 6; i++) {\n            const dir = directions.weduns[i];\n            vec3.add(temp, coords, dir);\n            power = max(power, getStrongPower(grid, temp));\n\n            const block = Grid.getBlockN(grid, temp);\n            if (block && block.getPower && block !== blocks.dust)\n                power = max(power, block.getPower(Grid.getStateN(grid, temp)));\n        }\n\n        // Set state power bits\n        power &= 0xF;\n        newState |= power;\n\n        // Set the new state\n        if (newState !== oldState) {\n            Grid.set(grid, coords, dust, newState);\n\n            // If the state changed, update neighbors\n            // TODO Also Send Block update when dust is destroyed\n            simulator.queueBlockUpdate().set(temp, TWO_BLOCKS_TAXICAB);\n        }\n    },\n\n    // Redstone dust specific properties\n    isFacing: (state: number, direction: vec3) => {\n        directions.checkCardinalVector(direction);\n        const w = !!(state & 0x80);\n        const e = !!(state & 0x40);\n        const n = !!(state & 0x20);\n        const s = !!(state & 0x10);\n\n        // Redstone wire can be considered to be facing a block in 3 scenarios:\n        // 1) The dust is attracted/connected to that type of block, e.g. torches, target blocks, other wire.\n        //    This can be tested using the corresponding bit of state\n        // 2) The dust isn't naturally attracted to that block, but it is arranged such that it points in a line,\n        //    and that line is facing towards that block. Specifically, the dust should be connected only in the\n        //    opposite direction.\n        // 3) The dust is not connected to any adjacent blocks and isn't configured to act in a dot, so it\n        //    shapes itself as a cross.\n        if      (direction[0] < 0 && (w || (e && !w && !n && !s))) return true; // connect to west\n        else if (direction[0] > 0 && (e || (w && !e && !n && !s))) return true; // connect to east\n        else if (direction[2] < 0 && (n || (s && !w && !e && !n))) return true; // connect to north\n        else if (direction[2] > 0 && (s || (n && !w && !e && !s))) return true; // connect to south\n        else return !w && !e && !n && !s && !(state & 0x1000); // cross shape\n    },\n\n    getMountedDirection: (state: number) => directions.down\n}; blockRegistry[blockIdCounter] = dust;\nconst slab: Block = {\n    id: ++blockIdCounter,\n    renderer: slabRenderer,\n    preventDownwardsTransmission: true,\n    isTransparent: true,\n    solidFaces: new DirectionMap([directions.up]),\n    getPlacedState: () => 0,\n    updateNeighbors: genUpdateNeighbors(ONE_BLOCK_TAXICAB),\n    handleNeighborUpdate: () => {}\n}; blockRegistry[blockIdCounter] = slab;\n\n// Torch state:\n// The torch has two components to its state, whether it is on enabled right now and which\n// side of a block it is mounted on.\n// Counting from LSB to MSB:\n// Whether the torch is enabled (emitting power) is stored in the 4th (mask 0x8) bit.\n// The orientation of the torch is stored in the 3rd least bits (mask 0x7).\n// Depending on the value of (state & 7):\n// 0 -> mounted on top of block\n// 1 -> mounted to west\n// 2 -> mounted to east\n// 3 -> mounted to north\n// 4 -> mounted to south\ninterface BlockTorch extends Block {\n    isEnabled: (state: number) => boolean;\n    getMountedDirection: (state: number) => ReadonlyVec3;\n    _onQTickCompleted: (qtick: QTick) => void;\n}\nconst torch: BlockTorch = {\n    id: ++blockIdCounter,\n    renderer: torchRenderer,\n    isTransparent: true,\n    attractsWires: true,\n    solidFaces: new DirectionMap([]),\n    mountingDirections: [...directions.wens, directions.down],\n    getPower: (state: number) => torch.isEnabled(state) ? 15 : 0,\n    getPlacedState: (mountingDirection: ReadonlyVec3) => {\n        if (directions.equals(directions.down, mountingDirection)) return 0;\n        else if (directions.equals(directions.west, mountingDirection)) return 1;\n        else if (directions.equals(directions.east, mountingDirection)) return 2;\n        else if (directions.equals(directions.north, mountingDirection)) return 3;\n        else return 4;\n    },\n    updateNeighbors: genUpdateNeighbors(TWO_BLOCKS_TAXICAB),\n    handleNeighborUpdate: (grid: Grid, coords: vec3, state: number, simulator: Simulator) => {\n        const mountedCoords = vec3.create();\n        const mountedDir = torch.getMountedDirection(state);\n        vec3.add(mountedCoords, coords, mountedDir);\n\n        // If mounted block is powered, torch should be disabled\n        //   torch is enabled  -> schedule qtick to disable it, overwriting enable-qtick if necessary\n        //   torch is disabled -> don't need to do anything\n        // If mounted block is unpowered, torch should be enabled\n        //   torch is enabled  -> don't need to do anything\n        //   torch is disabled -> schedule qtick to enable it\n        // QTick custom data is a boolean, whether the torch should be enabled\n        const isPowered = getWeakPower(grid, mountedCoords) > 0 || getStrongPower(grid, mountedCoords) > 0;\n        const isEnabled = torch.isEnabled(state);\n        if (isPowered) {\n            // We want the torch to be disabled\n            if (isEnabled) {\n                // clobber existing qtick if it would enable the torch again\n                const existingQTick = simulator.getScheduledQTick(coords);\n                if (existingQTick && !existingQTick.customData[0]) simulator.tryCancelQTick(coords);\n                // Schedule a qtick to disable the torch\n                // If the existing qtick was going to disable it, this won't do anything...\n                simulator.tryScheduleQTick(coords, 2, 0, torch._onQTickCompleted, [false, state]);\n            }\n        } else if (!isPowered) {\n            // We want the torch to be enabled\n            if (!isEnabled) {\n                // DON'T clobber existing qticks\n                simulator.tryScheduleQTick(coords, 2, 0, torch._onQTickCompleted, [true, state]);\n            }\n        }\n    },\n    getMountedDirection: (state: number) => {\n        const value = state & 7;\n        if (value === 0) return directions.down;\n        else if (value === 1) return directions.west;\n        else if (value === 2) return directions.east;\n        else if (value === 3) return directions.north;\n        else return directions.south;\n    },\n\n    // Redstone torch-specific\n    isEnabled: (state: number) => ((state & 8) === 0),\n    _onQTickCompleted: (qtick: QTick) => {\n        const [willBeEnabled, oldState] = qtick.customData as [boolean, number];\n        const newState = (willBeEnabled ? 0 : 8) | (oldState & 0x7);\n        // TODO fix this readonly/not readonly stuff\n        Grid.trySetState(qtick.grid, qtick.location as vec3, blocks.torch, newState);\n    }\n}; blockRegistry[blockIdCounter] = torch;\n\nexport const blocks = {\n    stone,\n    dust,\n    slab,\n    torch,\n\n    blockRegistry,\n    byId: (id: number, allowNull?: boolean): Block => {\n        const block = blocks.blockRegistry[id];\n        if (!block && !allowNull) {\n            throw new Error(`Tried to find a block with an invalid ID: ${id}`);\n        }\n        return block || null;\n    }\n};\n","import { GLRenderInfo } from './render';\nimport { Model, models } from './models';\nimport { mat4, vec3, ReadonlyVec3 } from 'gl-matrix';\nimport { initShader, initProgram } from './shader';\nimport directions from './directions';\n\nconst cursor = {\n    _vao: null,\n    _vbo: null,\n    _ebo: null,\n    _program: null,\n    _loc_mvp: null,\n    _loc_cursorPos: null,\n    _loc_cursorSize: null,\n    _loc_time: null,\n    _loc_renderFaces: null,\n    _renderFaces: null,\n    init: () => {\n        const vd = [];\n        for (let i = 0; i < 6; i++) {\n            // U        V           Face num\n            vd.push(1); vd.push(1); vd.push(i);\n            vd.push(1); vd.push(0); vd.push(i);\n            vd.push(2); vd.push(1); vd.push(i);\n            vd.push(2); vd.push(0); vd.push(i);\n        }\n        const glModel = Model.use(models.texturedCube, { nPerVertex: 3, data: vd },\n            null, false);\n\n        cursor._vao = gl.createVertexArray();\n        cursor._vbo = gl.createBuffer();\n        cursor._ebo = gl.createBuffer();\n\n        const vert = initShader('cursor_vert', cursorVertSrc, gl.VERTEX_SHADER);\n        const frag = initShader('cursor_frag', cursorFragSrc, gl.FRAGMENT_SHADER);\n        cursor._program = initProgram(vert, frag);\n        cursor._loc_mvp = gl.getUniformLocation(cursor._program, 'mvp');\n        cursor._loc_cursorPos = gl.getUniformLocation(cursor._program, 'cursorPos');\n        cursor._loc_cursorSize = gl.getUniformLocation(cursor._program, 'cursorSize');\n        cursor._loc_time = gl.getUniformLocation(cursor._program, 'time');\n        cursor._loc_renderFaces = gl.getUniformLocation(cursor._program, 'renderFaces');\n        cursor._renderFaces = new Float32Array(6);\n        for (let i = 0; i < 6; i++) cursor._renderFaces[i] = 1;\n\n        gl.bindVertexArray(cursor._vao);\n        gl.bindBuffer(gl.ARRAY_BUFFER, cursor._vbo);\n        gl.bufferData(gl.ARRAY_BUFFER, glModel.vertexData, gl.STATIC_DRAW);\n        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 24, 0);\n        gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 24, 12);\n        gl.vertexAttribPointer(2, 1, gl.FLOAT, false, 24, 20);\n        gl.enableVertexAttribArray(0);\n        gl.enableVertexAttribArray(1);\n        gl.enableVertexAttribArray(2);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cursor._ebo);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, glModel.indices, gl.STATIC_DRAW);\n    },\n    render: (info: GLRenderInfo, cursorPos: vec3, cursorSize: number) => {\n        gl.disable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n        gl.bindVertexArray(cursor._vao);\n        gl.useProgram(cursor._program);\n        gl.uniformMatrix4fv(cursor._loc_mvp, false, info.mvp);\n        gl.uniform3f(cursor._loc_cursorPos, cursorPos[0], cursorPos[1], cursorPos[2]);\n        gl.uniform1f(cursor._loc_cursorSize, cursorSize);\n        gl.uniform1f(cursor._loc_time, info.time);\n        gl.uniform1fv(cursor._loc_renderFaces, cursor._renderFaces, 0, 6);\n        gl.drawElements(gl.TRIANGLES, 36, gl.UNSIGNED_INT, 0);\n        gl.enable(gl.CULL_FACE);\n        gl.enable(gl.DEPTH_TEST);\n    },\n    setShowFace: (faceDirection: ReadonlyVec3, show: boolean) => {\n        let index: number;\n        if (faceDirection === directions.west) index = 1;\n        else if (faceDirection === directions.east) index = 2;\n        else if (faceDirection === directions.north) index = 3;\n        else if (faceDirection === directions.south) index = 4;\n        else if (faceDirection === directions.up) index = 0;\n        else if (faceDirection === directions.down) index = 5;\n        cursor._renderFaces[index] = show ? 1 : 0;\n    },\n    showAllFaces: () => {\n        for (let i = 0; i < 6; i++)\n            cursor._renderFaces[i] = 1;\n    }\n};\nexport default cursor;\n","import { vec3, ReadonlyVec3 } from 'gl-matrix';\n\nconst { sign } = Math;\n\nconst west: ReadonlyVec3 = vec3.fromValues(-1, 0, 0);\nconst east: ReadonlyVec3 = vec3.fromValues(1, 0, 0);\nconst down: ReadonlyVec3 = vec3.fromValues(0, -1, 0);\nconst up: ReadonlyVec3 = vec3.fromValues(0, 1, 0);\nconst north: ReadonlyVec3 = vec3.fromValues(0, 0, -1);\nconst south: ReadonlyVec3 = vec3.fromValues(0, 0, 1);\n\nconst none: ReadonlyVec3 = vec3.fromValues(0, 0, 0);\n\nconst wens: readonly ReadonlyVec3[] = [west, east, north, south];\nconst weduns: readonly ReadonlyVec3[] = [west, east, down, up, north, south];\nconst wensdu: readonly ReadonlyVec3[] = [west, east, north, south, down, up];\nconst xwensdu: readonly ReadonlyVec3[] = [none, west, east, north, south, down, up];\nconst wensu: readonly ReadonlyVec3[] = [west, east, north, south, up];\nconst x: readonly ReadonlyVec3[] = [none];\n\nconst checkCardinalVector = (dir: ReadonlyVec3) => {\n    const nComponents = (dir[0] !== 0 ? 1 : 0) + (dir[1] !== 0 ? 1 : 0) + (dir[2] !== 0 ? 1 : 0);\n    if (nComponents !== 1) {\n        throw new Error(`Not a cardinal direction vector: [${dir[0]}, ${dir[1]}, ${dir[2]}]`);\n    }\n};\n\nexport class DirectionMap {\n    values: boolean[];\n    constructor(directionList: readonly ReadonlyVec3[]) {\n        this.values = new Array(6);\n        for (let i = 0; i < 6; i++) this.values[i] = false;\n\n        for (let i = 0; i < directionList.length; i++) {\n            const dir = directionList[i];\n            for (let j = 0; j < 6; j++)\n                if (equals(weduns[j], dir)) this.values[j] = true;\n        }\n    }\n    query(dir: ReadonlyVec3): boolean {\n        if (equals(dir, west)) return this.values[0];\n        else if (equals(dir, east)) return this.values[1];\n        else if (equals(dir, down)) return this.values[2];\n        else if (equals(dir, up)) return this.values[3];\n        else if (equals(dir, north)) return this.values[4];\n        else if (equals(dir, south)) return this.values[5];\n        else return false;\n    }\n};\n\nconst equals = (dir1: ReadonlyVec3, dir2: ReadonlyVec3) => (\n    sign(dir1[0]) === sign(dir2[0]) &&\n    sign(dir1[1]) === sign(dir2[1]) &&\n    sign(dir1[2]) === sign(dir2[2]));\n\nconst arrContains = (arr: readonly ReadonlyVec3[], dir: ReadonlyVec3): boolean => {\n    for (let i = 0; i < arr.length; i++) {\n        if (equals(dir, arr[i]))\n            return true;\n    }\n    return false;\n};\n\nexport default { west, east, down, up, north, south, none,\n        wens, weduns, wensdu, xwensdu, wensu, x,\n        checkCardinalVector, equals, arrContains };\n","import { blocks } from './blocks';\nimport { Grid } from './grid';\nimport { Simulator } from './simulator';\n\nconst scenarios: {[key: string]: (grid: Grid, simulator: Simulator) => void} = {};\n\nscenarios['memory-cell'] = ((grid, simulator) => {\n    Grid.resize(grid, [0, -1, 0], [3, 2, 0]);\n    Grid.set(grid, [0, 0, 0], blocks.dust);\n    Grid.set(grid, [1, 0, 0], blocks.stone);\n    Grid.set(grid, [2, 0, 0], blocks.torch, 0x1);\n    Grid.set(grid, [3, 0, 0], blocks.dust);\n    Grid.set(grid, [0, 1, 0], blocks.torch, 0x2 | 0x8);\n    Grid.set(grid, [1, 1, 0], blocks.stone);\n    Grid.set(grid, [2, 1, 0], blocks.stone);\n    Grid.set(grid, [0, -1, 0], blocks.stone);\n    Grid.set(grid, [3, -1, 0], blocks.stone);\n    for (let i = 0; i < 4; i++) simulator.doGameTick();\n    Grid.set(grid, [1, 2, 0], blocks.dust);\n    Grid.set(grid, [2, 2, 0], blocks.dust);\n    for (let i = 0; i < 2; i++) simulator.doGameTick();\n});\n\nscenarios['simple-power'] = ((grid, simulator) => {\n    Grid.resize(grid, [0, -1, 0], [3, 0, 0]);\n    Grid.set(grid, [0,0,0], blocks.torch);\n    for (let x = 0; x < 4; x++)\n        Grid.set(grid, [x,-1,0], blocks.stone);\n    for (let x = 1; x < 4; x++)\n        Grid.set(grid, [x,0,0], blocks.dust);\n    simulator.doGameTick();\n});\n\nscenarios['inversion'] = ((grid, simulator) => {\n    Grid.resize(grid, [-8,-1,-3], [6,0,0]);\n\n    const generate = (off: number, includeTorch: boolean) => {\n        if (includeTorch)\n            Grid.set(grid, [-1, 0,off], blocks.torch);\n        Grid.set(grid, [-1,-1,off], blocks.stone);\n        Grid.set(grid, [0, 0,off], blocks.dust);\n        Grid.set(grid, [0,-1,off], blocks.stone);\n        \n        Grid.set(grid, [1, 0,off], blocks.stone);\n        Grid.set(grid, [2, 0,off], blocks.torch, 0x1);\n        Grid.set(grid, [3, 0,off], blocks.dust);\n        Grid.set(grid, [3,-1,off], blocks.stone);\n    };\n    generate(-3, false);\n    generate(0, true);\n\n    for (let i = 0; i < 4; i++)\n        simulator.doGameTick();\n});\n\nexport const loadScenario = (scenarioName: string): [Grid, Simulator] | null => {\n    const scenario = scenarios[scenarioName];\n    if (!scenario)\n        return null;\n\n    const grid = Grid.new([1, 1, 1]);\n    const simulator = new Simulator(grid);\n    scenario(grid, simulator);\n    return [grid, simulator];\n};\n","import { Block, blocks } from './blocks';\nimport { vec3, ReadonlyVec3 } from 'gl-matrix';\n\nexport interface GridSetCallback {\n    (coords: vec3, newBlock: Block | null, newState: number, oldBlock: Block | null, oldState: number): void;\n}\n\nexport interface Grid {\n    size: vec3;\n    min: vec3,\n    max: vec3, // inclusive\n    data: number[];\n    isDirty: boolean;\n    onSet: GridSetCallback | null;\n};\n\nconst { min, max } = Math;\n\nexport const Grid = {\n    new: (size: vec3, min?: vec3): Grid => {\n        Grid._sizeCheck(size);\n        min = min || vec3.fromValues(0, 0, 0);\n        const max = vec3.fromValues(-1, -1, -1);\n        vec3.add(max, max, size);\n        vec3.add(max, max, min); // max = min + size - [1,1,1]\n        return {\n            size,\n            min,\n            max,\n            data: Grid._createData(size),\n            isDirty: true,\n            onSet: null\n        };\n    },\n\n    /** Resize the grid. The current origin will be kept */\n    // This HAs nOt been Tested Yet!!!!!!!\n    resize: (grid: Grid, newMin: vec3, newMax: vec3) => {\n        const newSize = vec3.create();\n        vec3.sub(newSize, newMax, newMin);\n        vec3.add(newSize, newSize, [1, 1, 1]);\n        const newData = Grid._createData(newSize);\n\n        const mins = vec3.create();\n        const maxs = vec3.create();\n        vec3.min(mins, grid.min, newMin);\n        vec3.max(maxs, grid.max, newMax);\n        const xyz = vec3.create();\n        for (let x = mins[0]; x <= maxs[0]; x++) {\n            for (let y = mins[1]; y <= maxs[1]; y++) {\n                for (let z = mins[2]; z <= maxs[2]; z++) {\n                    vec3.set(xyz, x, y, z);\n\n                    // Copy from old data to new data\n                    if (Grid._inBounds(grid.min, grid.max, xyz) && Grid._inBounds(newMin, newMax, xyz)) {\n                        const oldI = Grid.index(grid, xyz);\n                        const newI = Grid._index(newMin, newSize, xyz);\n                        newData[newI] = grid.data[oldI];\n                        newData[newI + 1] = grid.data[oldI + 1];\n                    }\n                }\n            }\n        }\n\n        grid.size = newSize;\n        grid.min = newMin;\n        grid.max = newMax;\n        grid.data = newData;\n        grid.isDirty = true;\n    },\n\n    inBounds: (grid: Grid, xyz: vec3): boolean => Grid._inBounds(grid.min, grid.max, xyz),\n\n    _inBounds: (min: vec3, max: vec3, xyz: vec3): boolean => (\n        xyz[0] >= min[0] && xyz[1] >= min[1] && xyz[2] >= min[2] &&\n        xyz[0] <= max[0] && xyz[1] <= max[1] && xyz[2] <= max[2]),\n\n    index: (grid: Grid, xyz: vec3): number => Grid._index(grid.min, grid.size, xyz),\n\n    _index: (min: vec3, size: vec3, xyz: vec3): number => {\n        const xx = xyz[0] - min[0];\n        const yy = xyz[1] - min[1];\n        const zz = xyz[2] - min[2];\n        return (xx + (yy * size[0]) + (zz * size[1] * size[0])) * 2;\n    },\n\n    get: (grid: Grid, xyz: vec3, out: [Block, number]) => Grid._get(grid, xyz, out, false),\n\n    getN: (grid: Grid, xyz: vec3, out: [Block, number]) => Grid._get(grid, xyz, out, true),\n\n    getBlockN: (grid: Grid, xyz: vec3): Block | null => {\n        if (!Grid.inBounds(grid, xyz)) return null;\n        const index = Grid.index(grid, xyz);\n        return blocks.byId(grid.data[index], true);\n    },\n\n    getStateN: (grid: Grid, xyz: vec3): number | null => {\n        if (!Grid.inBounds(grid, xyz)) return null;\n        const index = Grid.index(grid, xyz);\n        if (!grid.data[index]) return null; // no block here\n        return grid.data[index + 1];\n    },\n\n    _get: (grid: Grid, xyz: vec3, out: [Block, number], allowNull: boolean) => {\n        if (allowNull)\n            if (!Grid.inBounds(grid, xyz)) {\n                out[0] = null;\n                out[1] = 0;\n                return;\n            }\n        else\n            Grid._boundsCheck(grid, xyz);\n        const index = Grid.index(grid, xyz);\n        out[0] = blocks.byId(grid.data[index], allowNull);\n        out[1] = grid.data[index + 1];\n    },\n\n    set: (grid: Grid, xyz: vec3, block: Block | null, state?: number) => {\n        state = state || 0;\n\n        // Check that we are within bounds\n        Grid._boundsCheck(grid, xyz);\n\n        // Get old block (Needed or callback function)\n        const index = Grid.index(grid, xyz);\n        const oldBlock: Block | null = blocks.byId(grid.data[index], true);\n        const oldState: number = grid.data[index];\n\n        // Set new data\n        grid.data[index] = block ? block.id : 0;\n        grid.data[index + 1] = state;\n\n        // Call hooks\n        grid.isDirty = true;\n        if (grid.onSet)\n            grid.onSet(xyz, block, state, oldBlock, oldState);\n    },\n\n    trySetState: (grid: Grid, xyz: vec3, requireBlock: Block, state: number): boolean => {\n        Grid._boundsCheck(grid, xyz);\n\n        const index = Grid.index(grid, xyz);\n        if (grid.data[index] !== requireBlock.id) return false;\n\n        const oldState = grid.data[index + 1];\n        grid.data[index + 1] = state;\n        grid.isDirty = true;\n        if (grid.onSet)\n            grid.onSet(xyz, requireBlock, state, requireBlock, oldState);\n        return true;\n    },\n\n    _boundsCheck: (grid: Grid, xyz: vec3) => {\n        if (!Grid.inBounds(grid, xyz)) {\n            console.error('Attempted to access out-of-bounds grid coordinate, details:',\n                'Grid:', grid, 'Coordinates:', xyz);\n            throw new Error('Attempted to access out-of-bounds grid coordinate');\n        }\n    },\n\n    _sizeCheck: (size: vec3) => {\n        if (size[0] <= 0 || size[1] <= 0 || size[2] <= 0) {\n            console.error('Grid size is too small:', size);\n            throw new Error('Grid sizde is too small');\n        }\n    },\n\n    _createData: (size: vec3): number[] => {\n        const data = new Array(size[0] * size[1] * size[2] * 2)\n        for (let i = 0; i < data.length; i++) {\n            data[i] = 0;\n        }\n        return data;\n    }\n};\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code\n\n// A list of all the keys we should track. If a key isn't in this list, it won't be tracked\nconst trackKeys: string[] = [];\nconst keyBlacklist: string[] = [];\n\n// Letter keys\nfor (let keycode = 0x41; keycode <= 0x5A; keycode++)\ntrackKeys.push('Key' + String.fromCharCode(keycode));\n\n// Arrow keys\n[/*'Up', 'Down', */'Left', 'Right'].forEach(k => trackKeys.push('Arrow' + k));\n\n// Number keys\nfor (let i = 0; i <= 9; i++) trackKeys.push('Digit' + i);\n\n// Misc. keys\ntrackKeys.push('Space');\ntrackKeys.push('ShiftLeft');\ntrackKeys.push('ShiftRight');\ntrackKeys.push('Escape');\n\n// Current state of held keys\nconst keyPressed = [];\nconst keyDown = [];\nconst keyWasPressed = [];\n\nconst handleKeydown = (e: KeyboardEvent) => {\n    if (trackKeys.indexOf(e.code) >= 0 &&\n            !e.altKey && !e.ctrlKey && !e.metaKey) {\n        keyPressed[e.code] = true;\n        e.preventDefault();\n    }\n};\n\nconst handleKeyup = (e: KeyboardEvent) => {\n    if (trackKeys.indexOf(e.code) >= 0 &&\n            !e.altKey && !e.ctrlKey && !e.metaKey) {\n        keyPressed[e.code] = false;\n        e.preventDefault();\n    }\n};\n\nconst init = () => {\n    window.addEventListener('keydown', handleKeydown);\n    window.addEventListener('keyup', handleKeyup);\n\n    for (let i = 0; i < trackKeys.length; i++) {\n        keyPressed[trackKeys[i]] = false;\n        keyDown[trackKeys[i]] = false;\n    }\n};\n\nconst update = () => {\n    for (let i = 0; i < trackKeys.length; i++) {\n        const k = trackKeys[i];\n        keyDown[k] = keyPressed[k] && !keyWasPressed[k];\n        keyWasPressed[trackKeys[i]] = keyPressed[k];\n    }\n};\n\nconst input = { init, update, keyPressed, keyDown };\nexport default input;\n","import { MaterialRenderer } from './render';\n\nexport const materialRegistry = {\n    _registry: {},\n    createRenderer: (materialName: string): MaterialRenderer => {\n        const createRenderer = materialRegistry._registry[materialName];\n        if (!createRenderer) {\n            throw new Error(`Tried to create a MaterialRenderer for a nonexistent material '${materialName}'`);\n        }\n        return createRenderer();\n    },\n    add: (materialName: string, createRenderer: () => MaterialRenderer): void => {\n        if (materialName in materialRegistry._registry) {\n            throw new Error(`Material '${materialName}' already registered`);\n        }\n        materialRegistry._registry[materialName] = createRenderer;\n    },\n};\n","import { vec3, mat4 } from 'gl-matrix';\nimport { clamp } from './util';\n\nexport interface Model {\n    vertices: vec3[];\n    indices: number[];\n};\n\nexport interface GLModel {\n    vertexData: Float32Array;\n    indices: Uint32Array;\n    dataPerVertex: number;\n}\n\nexport const Model = {\n    // Could need more strict testing, seems to be working\n    /**\n     * Transforms a normal Model into a GLModel that is easier to use for rendering.\n     * @param model The model to use\n     * @param extraData Additional data corresponding to each vertex. The final GLModel's data\n     * array consists of the vertex XYZ coordinates then the extraData element(s) corresponding to that vertex.\n     * Can be used e.g. for UVs\n     * @param transform Matrix transform to apply to each vertex\n     * @param flip If true, all faces will be flipped\n     */\n    use: (model: Model, extraData?: { nPerVertex: number, data: number[] }, transform?: mat4, flip?: boolean): GLModel => {\n        if (extraData && extraData.data.length / extraData.nPerVertex !== model.vertices.length) {\n            const expectedAmount = extraData.nPerVertex * model.vertices.length;\n            const gotAmount = extraData.data.length;\n            throw Error(`Wrong amount of extra data; expected ${expectedAmount} at ${extraData.nPerVertex}/vertex, got ${gotAmount}`);\n        }\n\n        const step = 3 + ((extraData && extraData.nPerVertex) || 0);\n        const outVerts = new Array(model.vertices.length * step);\n        const vec = vec3.create();\n\n        for (let i = 0; i < model.vertices.length; i++) {\n            vec3.copy(vec, model.vertices[i]);\n            if (transform)\n                vec3.transformMat4(vec, vec, transform);\n\n            outVerts[i * step + 0] = vec[0];\n            outVerts[i * step + 1] = vec[1];\n            outVerts[i * step + 2] = vec[2];\n\n            if (extraData) {\n                const index = extraData.nPerVertex * i;\n                for (let j = 0; j < extraData.nPerVertex; j++) {\n                    outVerts[i * step + 3 + j] = extraData.data[index + j];\n                }\n            }\n        }\n\n        // Flip indices\n        let indices: Uint32Array;\n        if (!flip) {\n            indices = Uint32Array.from(model.indices);\n        } else {\n            indices = new Uint32Array(model.indices.length);\n            for (let i = 0; i < indices.length; i += 3) {\n                for (let j = 0; j < 3; j++) {\n                    indices[i + j] = model.indices[i + (2 - j)];\n                }\n            }\n        }\n\n        return {\n            vertexData: Float32Array.from(outVerts),\n            indices,\n            dataPerVertex: step\n        };\n    }\n};\n\nconst triangle: Model = {\n    vertices: [\n        [-0.5, -0.5, 0.0],\n        [0.5, -0.5, 0.0],\n        [0.0, 0.5, 0.0]\n    ],\n    indices: [\n        0, 1, 2\n    ]\n};\n\nconst quad: Model = {\n    vertices: [\n        [0.0, 0.0, 0.0],\n        [0.0, 1.0, 0.0],\n        [1.0, 1.0, 0.0],\n        [1.0, 0.0, 0.0],\n    ],\n    indices: [\n        0, 2, 1,\n        2, 0, 3,\n    ]\n};\n\nconst cube: Model = {\n    vertices: [\n        /*\n         * +-> X\n         * |\n         * v Z\n         * \n         * Top\n         * 4+++++5\n         * |     |\n         * |     |\n         * 7+++++6\n         * \n         * Bottom       (Looking from top)\n         * 0+++++1      1+++++0\n         * |     |      |     |\n         * |     |      |     |\n         * 3+++++2      2+++++3\n         * */\n        [0, 0, 0], [1, 0, 0],\n        [1, 0, 1], [0, 0, 1],\n        [0, 1, 0], [1, 1, 0],\n        [1, 1, 1], [0, 1, 1]\n    ],\n    indices: [\n        // Top\n        4, 7, 5, 5, 7, 6,\n        //7, 6, 4, 4, 6, 5,\n        // -X side\n        4, 0, 7, 7, 0, 3,\n        // +X side\n        6, 2, 5, 5, 2, 1,\n        // -Z side\n        5, 1, 4, 4, 1, 0,\n        // +Z side\n        7, 3, 6, 6, 3, 2,\n        // Bottom\n        1, 2, 0, 0, 2, 3\n    ]\n};\n\n// Similar to the cube model, but doesn't share vertices between its sides, allowing to put UVs on vertices\nconst texturedCube: Model = { vertices: [], indices: [] };\nlet k = 0;\nfor (let i = 0; i < cube.indices.length / 6; i++) {\n    const ii = i * 6;\n    texturedCube.vertices.push(cube.vertices[cube.indices[ii]]);\n    texturedCube.vertices.push(cube.vertices[cube.indices[ii + 1]]);\n    texturedCube.vertices.push(cube.vertices[cube.indices[ii + 2]]);\n    texturedCube.vertices.push(cube.vertices[cube.indices[ii + 5]]);\n    texturedCube.indices.push(k);\n    texturedCube.indices.push(k + 1);\n    texturedCube.indices.push(k + 2);\n    texturedCube.indices.push(k + 2);\n    texturedCube.indices.push(k + 1);\n    texturedCube.indices.push(k + 3);\n    k += 4;\n}\n\n// Like the textured cube model, but shift vertices inwards (horizontally) by 3 pixels\nconst torch: Model = { vertices: [], indices: [] };\nconst TORCH_SHIFT = 3.0 / 8.0;\nconst torchShiftTemp = vec3.create();\nfor (let i = 0; i < texturedCube.vertices.length / 4; i++) {\n    const vert0 = vec3.clone(texturedCube.vertices[i*4]);\n    const vert1 = vec3.clone(texturedCube.vertices[i*4+1]);\n    const vert2 = vec3.clone(texturedCube.vertices[i*4+2]);\n    const vert3 = vec3.clone(texturedCube.vertices[i*4+3]);\n    let shiftX = 0;\n    let shiftY = 0;\n    let shiftZ = 0;\n    if (i === 0) shiftY = -2.0 / 8.0; // Top side\n    else if (i === 1) shiftX = TORCH_SHIFT; // -X side\n    else if (i === 2) shiftX = -TORCH_SHIFT; // +X side\n    else if (i === 3) shiftZ = TORCH_SHIFT; // -Z side\n    else if (i === 4) shiftZ = -TORCH_SHIFT; // +Z side\n    vec3.set(torchShiftTemp, shiftX, shiftY, shiftZ);\n    vec3.add(vert0, vert0, torchShiftTemp);\n    vec3.add(vert1, vert1, torchShiftTemp);\n    vec3.add(vert2, vert2, torchShiftTemp);\n    vec3.add(vert3, vert3, torchShiftTemp);\n    torch.vertices[i*4] = vert0;\n    torch.vertices[i*4+1] = vert1;\n    torch.vertices[i*4+2] = vert2;\n    torch.vertices[i*4+3] = vert3;\n};\nfor (let i = 0; i < texturedCube.indices.length; i++)\n    torch.indices.push(texturedCube.indices[i]);\n\nexport const models = { triangle, quad, cube, texturedCube, torch };\n","import { initProgram, initShader } from './shader';\nimport { clamp, lerp, normalizeRad as normalizeRadians } from './util';\nimport { vec3, mat4 } from 'gl-matrix';\nimport { Grid } from './grid';\nimport { GLModel, Model, models } from './models';\nimport { Block, blocks } from './blocks';\nimport { materialRegistry } from './materials';\nimport tuple from './tuples';\n\ndeclare var gl: WebGL2RenderingContext;\n\nconst { abs, min, max, floor } = Math;\n\nexport interface ModelCombiner {\n    _modelBuffer: GLModel[];\n    _totalVertices: number;\n    _totalIndices: number;\n}\n\nexport const ModelCombiner = {\n    new: (): ModelCombiner => ({ _modelBuffer: [], _totalVertices: 0, _totalIndices: 0 }),\n\n    /** Adds a model */\n    addModel: (self: ModelCombiner, model: GLModel): void => {\n        self._modelBuffer.push(model);\n        self._totalVertices += model.vertexData.length;\n        self._totalIndices += model.indices.length;\n    },\n\n    /** Combines into single model */\n    combine: (self: ModelCombiner): GLModel => {\n        const vertexData = new Array(self._totalVertices);\n        const indices = new Array(self._totalIndices);\n\n        let vertexDataIndex = 0;\n        let indicesIndex = 0;\n        let modelStartVertex = 0;\n\n        for (let i = 0; i < self._modelBuffer.length; i++) {\n            const model = self._modelBuffer[i];\n            for (let j = 0; j < model.vertexData.length; j++)\n                vertexData[vertexDataIndex++] = model.vertexData[j];\n            for (let j = 0; j < model.indices.length; j++)\n                indices[indicesIndex++] = model.indices[j] + modelStartVertex;\n            modelStartVertex += model.vertexData.length / model.dataPerVertex;\n        }\n        return {\n            vertexData: Float32Array.from(vertexData),\n            indices: Uint32Array.from(indices),\n            dataPerVertex: null\n        };\n    },\n\n    clear: (self: ModelCombiner): void => {\n        self._modelBuffer.splice(0);\n        self._totalVertices = 0;\n        self._totalIndices = 0;\n    }\n};\n\n/**\n * A renderer for a certain type of blocks. There will be 1 of these per type of block in the\n * simulator. Its primary purpose is its render function which\n * writes models into the ModelCombiner. The particular subclass of the renderer may add additional\n * information to these models, such as UV coordinates or information for the shader.\n * \n * The same BlockRenderer can be used by multiple block types, as long as the number of models added\n * per render invocation is the same for each type of block.\n * \n * A reference to a BlockRenderer can be obtained through a Block object.\n */\nexport interface BlockRenderer {\n    nModels: number;\n    materialName: string;\n\n    /** Called to render for a single block in a grid. Add models to the ModelCombiner */\n    render(grid: Grid, coords: vec3, block: Block, state: number, out: ModelCombiner);\n}\n\n/**\n * Manages rendering for a specific material (Shader). There will be one of these instantiated per\n * material, per combined model. Will handle VBOs/EBOs and directly interface with OpenGL.\n * \n * A material can be used for one or more block types. Blocks will generally use a generally use a\n * different material when they need a different shader than the default one.\n */\nexport interface MaterialRenderer {\n    /** The name of the material we are rendering */\n    materialName: string;\n\n    init();\n\n    /**\n     * The models that sent to the render function are combined and given to this function so that they can be\n     * uploaded to the GPU.\n     */\n    uploadCombinedModel(model: GLModel);\n\n    /** Called to render the combined model, I.e. the final step in rendering this particular type of block. */\n    renderCombinedModel(info: GLRenderInfo, alpha: number);\n}\n\nexport class LayerRenderer {\n    _materials: { [materialName: string]: [ModelCombiner, MaterialRenderer] };\n    _materialKeys: string[];\n    constructor() {\n        this._materials = {};\n        this._materialKeys = [];\n    }\n    updateModels(grid: Grid, planeNormal: vec3, planeStart: number, planeEnd?: number) {\n        planeEnd = planeEnd || 50000;\n\n        // Determine the range of coordinates to be included in this layer, considering the clipped\n        // area we want this layer to render\n        let minX = grid.min[0];\n        let maxX = grid.max[0];\n        let minY = grid.min[1];\n        let maxY = grid.max[1];\n        let minZ = grid.min[2];\n        let maxZ = grid.max[2];\n        if (planeNormal[0]) {\n            const a = planeNormal[0] * planeStart;\n            const b = planeNormal[0] * planeEnd;\n            minX = max(minX, min(a, b));\n            maxX = min(maxX, max(a, b));\n        }\n        if (planeNormal[1]) {\n            const a = planeNormal[1] * planeStart;\n            const b = planeNormal[1] * planeEnd;\n            minY = max(minY, min(a, b));\n            maxY = min(maxY, max(a, b));\n        }\n        if (planeNormal[2]) {\n            const a = planeNormal[2] * planeStart;\n            const b = planeNormal[2] * planeEnd;\n            minZ = max(minZ, min(a, b));\n            maxZ = min(maxZ, max(a, b));\n        }\n\n        // Build a GLModel for each material\n        // TODO Add option to render blocks in order, from farthest-to-camera to nearest-to-camera\n        // (This is needed for semitransparent rendering)\n        const coords = vec3.create();\n        for (let x = minX; x <= maxX; x++) {\n            for (let y = minY; y <= maxY; y++) {\n                for (let z = minZ; z <= maxZ; z++) {\n                    vec3.set(coords, x, y, z);\n                    const out: [Block, number] = [null, 0];\n                    Grid.getN(grid, coords, out);\n                    const block = out[0];\n                    const state = out[1];\n                    if (!block) continue;\n\n                    const matName = block.renderer.materialName;\n                    if (!this._materials[matName]) {\n                        const arr = tuple(ModelCombiner.new(), materialRegistry.createRenderer(matName));\n                        arr[1].init();\n                        this._materials[matName] = arr;\n                        this._materialKeys.push(matName);\n                    }\n                    const [combiner, _] = this._materials[matName];\n                    block.renderer.render(grid, coords, block, state, combiner);\n                }\n            }\n        }\n\n        // Upload built models to MaterialRenderers\n        for (let i = 0; i < this._materialKeys.length; i++) {\n            const matName = this._materialKeys[i];\n            const [combiner, renderer] = this._materials[matName];\n            const model = ModelCombiner.combine(combiner);\n            renderer.uploadCombinedModel(model);\n            ModelCombiner.clear(combiner);\n        }\n    }\n    render(info: GLRenderInfo, alpha: number) {\n        for (let i = 0; i < this._materialKeys.length; i++) {\n            const matName = this._materialKeys[i];\n            const [_, renderer] = this._materials[matName];\n            renderer.renderCombinedModel(info, alpha);\n        }\n    }\n}\n\nexport interface GLRenderInfo {\n    mvp: Float32List;\n    time: DOMHighResTimeStamp;\n    //[key: string]: any; // any additional info needed for rendering\n}\n\nconst ALPHA_REGRESSION = [0.2, 1.0, 0.3, 0.1]; // alpha value for each visible grid layer\nexport class LayeredGridRenderer {\n    _layers: LayerRenderer[];\n    _facingAxis: vec3;\n    _centerPos: vec3;\n    fadeLayers: boolean;\n    constructor() {\n        this._layers = new Array(4);\n        this._layers[0] = new LayerRenderer();\n        this._layers[1] = new LayerRenderer();\n        this._layers[2] = new LayerRenderer();\n        this._layers[3] = new LayerRenderer();\n        this._facingAxis = vec3.create();\n        this._centerPos = vec3.create();\n        this.fadeLayers = true;\n    }\n    setCamera(facingAxis: vec3, centerPos: vec3) {\n        vec3.copy(this._facingAxis, facingAxis);\n        vec3.copy(this._centerPos, centerPos);\n        if (this._facingAxis[0] === -0) this._facingAxis[0] = 0;\n    }\n    updateModels(grid: Grid) {\n        const f = this._facingAxis;\n        const c = this._centerPos;\n        //const k = abs(f[0]) * c[0] + abs(f[1]) * c[1] + abs(f[2]) * c[2]; // the coordinate of centerPos along the facing-axis\n        const k = Math.round(vec3.dot(f, c));\n        this._layers[0].updateModels(grid, this._facingAxis, k + 1, k + 10000);\n        this._layers[1].updateModels(grid, this._facingAxis, k);\n        this._layers[2].updateModels(grid, this._facingAxis, k - 1, k - 1);\n        this._layers[3].updateModels(grid, this._facingAxis, k - 2, k - 2);\n    }\n    render(info: GLRenderInfo) {\n        for (let i = 0; i < 4; i++) {\n            let alpha = this.fadeLayers ? ALPHA_REGRESSION[i] : 1.0;\n            this._layers[i].render(info, alpha);\n        }\n    }\n}\n\nclass HotbarInterfaceRenderer {\n    _prog: WebGLProgram;\n    _vao: WebGLVertexArrayObject;\n    _loc_screenDimensions: WebGLUniformLocation;\n    _loc_uiPosition: WebGLUniformLocation;\n    _loc_cellParameters: WebGLUniformLocation;\n    _loc_selectTime: WebGLUniformLocation;\n    constructor() {\n        const vert = initShader('hotbar_vert', hotbarVertSrc, gl.VERTEX_SHADER);\n        const frag = initShader('hotbar_frag', hotbarFragSrc, gl.FRAGMENT_SHADER);\n        this._prog = initProgram(vert, frag);\n        this._loc_screenDimensions = gl.getUniformLocation(this._prog, 'screenDimensions');\n        this._loc_uiPosition = gl.getUniformLocation(this._prog, 'uiPosition');\n        this._loc_cellParameters = gl.getUniformLocation(this._prog, 'cellParameters');\n        this._loc_selectTime = gl.getUniformLocation(this._prog, 'selectTime');\n\n        const glModel = Model.use(models.quad);\n\n        this._vao = gl.createVertexArray();\n        const vbo = gl.createBuffer();\n        const ebo = gl.createBuffer();\n        gl.bindVertexArray(this._vao);\n        gl.bindBuffer(gl.ARRAY_BUFFER, vbo);\n        gl.bufferData(gl.ARRAY_BUFFER, glModel.vertexData, gl.STATIC_DRAW)\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ebo);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, glModel.indices, gl.STATIC_DRAW);\n        gl.vertexAttribPointer(0, 3, gl.FLOAT, false, 12, 0);\n        gl.enableVertexAttribArray(0);\n    }\n    render(screenWidth: number, screenHeight: number,\n            posX: number, posY: number, width: number, height: number,\n            cellSize: number, cellSpacing: number, padding: number,\n            selectedIndex: number, timeSinceSelected: number) {\n        gl.bindVertexArray(this._vao);\n        gl.useProgram(this._prog);\n        gl.uniform2f(this._loc_screenDimensions, screenWidth, screenHeight);\n        gl.uniform4f(this._loc_uiPosition, posX, posY, width, height);\n        gl.uniform4f(this._loc_cellParameters, cellSize, cellSpacing, padding, selectedIndex);\n        gl.uniform1f(this._loc_selectTime, timeSinceSelected);\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_INT, 0);\n    }\n}\n\nexport class HotbarRenderer {\n    _ui: HotbarInterfaceRenderer;\n    _renderers: [Block, MaterialRenderer][]; // One per type of block\n    _rotations: number[];\n    constructor(hotbarBlocks: Block[]) {\n        this._ui = new HotbarInterfaceRenderer();\n        this._renderers = [];\n        this._rotations = [];\n        const combiner = ModelCombiner.new();\n        const grid = Grid.new([1,1,1]);\n        for (const block of hotbarBlocks) {\n            ModelCombiner.clear(combiner);\n            block.renderer.render(grid, [0,0,0], block, block.hotbarState || 0, combiner);\n\n            const matRenderer = materialRegistry.createRenderer(block.renderer.materialName);\n            matRenderer.init();\n            matRenderer.uploadCombinedModel(ModelCombiner.combine(combiner));\n            this._renderers.push(tuple(block, matRenderer));\n            this._rotations.push(0);\n        }\n    }\n    render(time: number, deltaTime: number,\n            screenWidth: number, screenHeight: number,\n            selectedBlock: Block, previousBlock: Block, selectedBlockTime: number) {\n        const all_size = 50;\n        const all_spacing = 25;\n        const ui_padding = 5;\n\n        const all_yOffset = clamp(0.05*screenHeight, 4, 45);\n        const all_xIncrement = all_size+all_spacing;\n        const all_startX = screenWidth/2 + (-this._renderers.length/2)*all_xIncrement;\n        const all_startY = all_yOffset + ui_padding;\n\n\n        let selectedIndex = 0;\n        for (let i = 0; i < this._renderers.length; i++)\n                if (selectedBlock === this._renderers[i][0])\n                    selectedIndex = i;\n\n        gl.disable(gl.DEPTH_TEST);\n        this._ui.render(screenWidth, screenHeight,\n            all_startX-ui_padding, all_startY-ui_padding,\n            all_xIncrement*this._renderers.length + ui_padding*2 - all_spacing, all_size + ui_padding*2,\n            all_size, all_spacing, ui_padding, selectedIndex, time - selectedBlockTime);\n        gl.enable(gl.DEPTH_TEST);\n\n        for (let i = 0; i < this._renderers.length; i++) {\n            const mvp: mat4 = new Float32Array(16);\n            const cam = mat4.create();\n            const proj = mat4.create();\n\n            const selected    = this._renderers[i][0] === selectedBlock;\n            const wasSelected = this._renderers[i][0] === previousBlock;\n\n            const selectTransition =\n                selected ? this._generateTransition(time, selectedBlockTime, 8.0) :\n                    (wasSelected ? 1.0 - this._generateTransition(time, selectedBlockTime, 16.0) : 0.0);\n            const selectTransition2 =\n                selected ? this._generateTransition(time, selectedBlockTime, 4.0) :\n                    (wasSelected ? 1.0 - this._generateTransition(time, selectedBlockTime, 8.0) : 0.0);\n\n            const orthoSize = 1.5;\n            mat4.ortho(proj, -0.5*orthoSize, 0.5*orthoSize, -0.5*orthoSize, 0.5*orthoSize, 0.1, 100.0);\n            mat4.identity(cam);\n            mat4.translate(cam, cam, [0, (0.125+0.05*selectTransition2)*0*Math.cos(2*Math.PI*0.5*time), -5.0]);\n            mat4.rotateX(cam, cam, Math.PI*(0.08 + 0.08*selectTransition));\n            const rotation: number =\n                selected ? (this._rotations[i] += 2*Math.PI*0.15*deltaTime*selectTransition) :\n                lerp(normalizeRadians(this._rotations[i]), 2*Math.PI*-0.05, (time-selectedBlockTime)*8);\n            if (!selected)\n                this._rotations[i] = rotation;\n            mat4.rotateY(cam, cam, rotation);\n            const scaleBlock = 1.0 + 0.2*selectTransition;\n            mat4.scale(cam, cam, [scaleBlock,scaleBlock,scaleBlock]);\n            mat4.translate(cam, cam, [-0.5,-0.5+0.0*selectTransition,-0.5]);\n            mat4.identity(mvp);\n            mat4.mul(mvp, proj, cam);\n\n            const sizeX = all_size/screenWidth;\n            const sizeY = all_size/screenHeight;\n            const left = (all_startX + i*all_xIncrement)/screenWidth;\n            const bottom = (all_startY)/screenHeight;\n            const adjust = mat4.create();\n            mat4.identity(adjust);\n            mat4.translate(adjust, adjust, [-1.0 + 2*left, -1.0 + 2*bottom, 0.0]);\n            mat4.scale(adjust, adjust, [sizeX,sizeY,1.0]);\n            mat4.translate(adjust, adjust, [1.0, 1.0, 0.0]);\n            mat4.mul(mvp, adjust, mvp);\n\n            const renderInfo: GLRenderInfo = { mvp:mvp, time: 0.0 };\n            this._renderers[i][1].renderCombinedModel(renderInfo, 1.0);\n        }\n    }\n    _generateTransition(time: number, sinceTime: number, speed: number): number {\n        return clamp((time - sinceTime) * speed, 0.0, 1.0);\n    }\n}\n\n/**\n * Place the 4 UV-pairs for a quad at the specified position of an array.\n * Important: Designed for triangle vertices order:\n * (TopLeft, BottomLeft, TopRight, TopRight, BottomLeft, BottomRight).\n * Other orders may not work.\n * \n * @param textureIndex Index in the texture map. this is an integer counting from left to right,\n * top to bottom. Top-left texture will have a textureIndex of 0, and in an 8x8 sprite atlas,\n * bottom-right will have a textureIndex of 63. This is the parameter that determines the UVs\n * put in.\n * @param out The array to place UVs in\n * @param outIndex The start index in the array to place UVs into\n * @param rotation Optional, either 0, 90, 180, or 270. Rotates the texture counter-clockwise by\n * the specified amount of degrees.\n * @param nPerVertex Optional, number of extra floats per vertex when sent to Model.use(). Defaults\n * to 2, because each vertex usually has a U and V coordinate sent along with it and nothing else.\n * This should be the same as the nPerVertex parameter sent to Model.use().\n */\nexport const useUvs = (textureIndex: number, out: any[], outIndex: number, rotation?: number, nPerVertex?: number): void => {\n    rotation = rotation || 0;\n    nPerVertex = nPerVertex || 2;\n    if (rotation !== 0 && rotation !== 90 && rotation !== 180 && rotation !== 270)\n        throw new Error(`Rotation not a valid value: ${rotation}`);\n\n    const k = 0.01;\n    const u0 = textureIndex % 8 + k;\n    const v0 = floor(textureIndex / 8) + k;\n    const u1 = u0 + 1 - 2 * k;\n    const v1 = v0 + 1 - 2 *k;\n\n    const uA = u0; const vA = v0;\n    const uB = u0; const vB = v1;\n    const uC = u1; const vC = v0;\n    const uD = u1; const vD = v1;\n    const n = nPerVertex;\n    if (rotation === 0) {\n        out[outIndex+n*0+0] = uA; out[outIndex+n*0+1] = vA;\n        out[outIndex+n*1+0] = uB; out[outIndex+n*1+1] = vB;\n        out[outIndex+n*2+0] = uC; out[outIndex+n*2+1] = vC;\n        out[outIndex+n*3+0] = uD; out[outIndex+n*3+1] = vD;\n    } else if (rotation === 90) {\n        out[outIndex+n*0+0] = uB; out[outIndex+n*0+1] = vB;\n        out[outIndex+n*1+0] = uD; out[outIndex+n*1+1] = vD;\n        out[outIndex+n*2+0] = uA; out[outIndex+n*2+1] = vA;\n        out[outIndex+n*3+0] = uC; out[outIndex+n*3+1] = vC;\n    } else if (rotation === 180) {\n        out[outIndex+n*0+0] = uD; out[outIndex+n*0+1] = vD;\n        out[outIndex+n*1+0] = uC; out[outIndex+n*1+1] = vC;\n        out[outIndex+n*2+0] = uB; out[outIndex+n*2+1] = vB;\n        out[outIndex+n*3+0] = uA; out[outIndex+n*3+1] = vA;\n    } else {\n        out[outIndex+n*0+0] = uC; out[outIndex+n*0+1] = vC;\n        out[outIndex+n*1+0] = uA; out[outIndex+n*1+1] = vA;\n        out[outIndex+n*2+0] = uD; out[outIndex+n*2+1] = vD;\n        out[outIndex+n*3+0] = uB; out[outIndex+n*3+1] = vB;\n    }\n};\n","declare var gl: WebGL2RenderingContext;\n\n// Adds line numbers to source code\nconst annotateSource = (source: string): string =>\n    source.split('\\n').reduce((out, line, i) => out + '\\n' + ('   ' + (i + 1)).slice(-3) + ' ' + line, '');\n\nexport const initShader = (name: string, src: string, type: number): WebGLShader => {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.error(`Error compiling shader ${name}`, gl.getShaderInfoLog(shader));\n        console.error(annotateSource(src));\n        alert(`Shader compilation error: ${name}`);\n        return null;\n    }\n    return shader;\n};\n\nexport const initProgram = (vert: WebGLShader, frag: WebGLShader): WebGLProgram => {\n    const program = gl.createProgram();\n    gl.attachShader(program, vert);\n    gl.attachShader(program, frag);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n        console.error('Error linking program', gl.getProgramInfoLog(program));\n        alert('Program linkage error');\n        return null;\n    }\n    return program;\n};","import { GuillotineArray, LinkedList } from './util';\n// Reference:\n// https://minecraft.gamepedia.com/Mechanics/Redstone\n// https://minecraft.gamepedia.com/Block_update\n// https://technical-minecraft.fandom.com/wiki/Tile_Tick_Block\n// https://technical-minecraft.fandom.com/wiki/0-tick_pulses\n// https://old.reddit.com/r/redstone/comments/82dw6x/update_order_list/\n\nimport { vec3, ReadonlyVec3 } from 'gl-matrix';\nimport { Grid } from './grid';\nimport { Block, blocks } from './blocks';\nimport directions from './directions';\n\ndeclare type rvec3 = ReadonlyVec3;\n\nconst { min, max } = Math;\n\nexport class QTick { // aka \"tile tick\"\n    readonly location: rvec3;\n    priority: number;\n    delay: number; // in game ticks\n    onCompleted: (qt: QTick) => void;\n    grid: Grid;\n    customData: any;\n    isFree: boolean;\n    constructor(location: vec3) {\n        this.location = vec3.clone(location);\n        this.isFree = true;\n    }\n}\n\n/**\n * Provides a way to look up QTicks by grid coordinate\n */\nclass QTickGrid {\n    _data: Map<number, QTick>;\n    constructor() {\n        this._data = new Map();\n    }\n    get(coords: vec3): QTick | undefined {\n        return this._data.get(this._hash(coords));\n    }\n    getOrCreate(coords: vec3): QTick {\n        const key = this._hash(coords);\n        let qt = this._data.get(key);\n        if (!qt) {\n            qt = new QTick(coords);\n            this._data.set(key, qt);\n        }\n        return qt;\n    }\n    // TODO Enforce max grid size; x,y,z E [-2^9,2^9)\n    _hash(coords: vec3): number {\n        // TODO Better hash function that allows bigger coordinates\n        const a = coords[0] + 512;\n        const b = coords[1] + 512;\n        const c = coords[2] + 512;\n        return (a << 0) | (b << 10) | (c << 20);\n    }\n}\n\nexport class BlockUpdate {\n    readonly location: vec3;\n    updateOrder: readonly rvec3[];\n    needsSet: boolean;\n    constructor() {\n        this.location = vec3.create();\n        this.updateOrder = null;\n        this.needsSet = true;\n    }\n    set(location: vec3, updateOrder: readonly rvec3[]) {\n        vec3.copy(this.location, location);\n        this.updateOrder = updateOrder;\n        this.needsSet = false;\n    }\n    setPostPlacement(location: vec3) {\n        this.set(location, directions.xwensdu);\n    }\n}\n\nexport class Simulator {\n    grid: Grid;\n    // Used for O(1) qtick push/remove and O(n) iteration\n    activeQticks: LinkedList<QTick>;\n    // Used for O(1) qtick lookup by vec3\n    qtickGrid: QTickGrid;\n    sortedQticks: QTick[];\n    tickCount: number;\n    blockUpdatePool: BlockUpdate[];\n    blockUpdateLength: number;\n    tempVec3: vec3;\n    tempOut: [Block, number];\n    constructor(grid: Grid, installHooks?: boolean) {\n        this.grid = grid;\n        this.activeQticks = new LinkedList();\n        this.qtickGrid = new QTickGrid();\n        this.sortedQticks = [];\n        this.tickCount = 0;\n        this.blockUpdatePool = [];\n        this.blockUpdateLength = 0;\n        this.tempVec3 = vec3.create();\n        this.tempOut = [null, 0];\n\n        if (installHooks === undefined || installHooks) {\n            this._installGridHooks();\n        }\n    }\n    doGameTick() {\n        // Execute queued ticks.\n        // The order of this follows 2 rules:\n        // 1) QTicks with a lower delay are executed first (simple).\n        // 2) If two qticks have the same delay, the tick that was queued first happens first.\n        // The second property is guaranteed by this code because of the way adding ticks works.\n        // This property only comes into play if 2 qticks are added in the same rtick. When _queueTick()\n        // is called, the QTick object is placed in the \"next queued tick index\" and that index\n        // is incremented. Within the redstone tick that queued tick index won't change anywhere else.\n        // So the qticks are added after each other in order, thus satisfying the second property.\n        const iterator = this.activeQticks.iterator();\n        while (iterator.hasNext()) {\n            const tick = iterator.next();\n\n            // Count down\n            tick.delay--;\n\n            // Execute callback if necessary\n            if (tick.delay <= 0) {\n                iterator.remove();\n                this.sortedQticks.push(tick);\n            }\n        }\n        this.sortedQticks.sort((a, b) => a.priority - b.priority);\n        for (let i = 0; i < this.sortedQticks.length; i++) {\n            const tick = this.sortedQticks[i];\n            tick.onCompleted(tick);\n            tick.isFree = true;\n        }\n        this.sortedQticks.splice(0);\n\n        // Perform redstone tick\n        if (this.tickCount++ % 2 === 0) {\n            this._doRedstoneTick();\n        }\n    }\n    /**\n     * Call to start the process of queuing a block update. The process of queuing the\n     * block update is as follows:\n     * 1) Call Simulator.queueBlockUpdate() to obtain a BlockUpdate object from the internal pool\n     * 2) Call set() or related methods on the BlockUpdate object to set its parameters\n     * THe block update will now be queued and executed by the simulator.\n     */\n    queueBlockUpdate(): BlockUpdate {\n        let bu = this.blockUpdatePool[this.blockUpdateLength];\n        if (!bu) {\n            bu = new BlockUpdate();\n            this.blockUpdatePool[this.blockUpdateLength] = bu;\n        }\n        this.blockUpdateLength++;\n        bu.needsSet = true;\n        return bu;\n    }\n    //(Outdated) QueueTick setup:\n    // 1) Call queueTick() to obtain a QTick object\n    //  -> Finds a free QTick object in the queuedTicks array\n    //  -> Sets QTick.id to the index in the array\n    // 2) Call QTick.set() to set its parameters\n    //  -> Sets QTick.isFree to false\n    //  -> Now the QTick is ready to be iterated over\n    // doGameTick() iterates over QTicks and decrements the timer on free ones.\n    // When the timer runs out the callback is called and QTick.isFree is set back to true\n    getScheduledQTick(location: vec3): QTick | null {\n        const qt = this.qtickGrid.get(location);\n        return (qt && !qt.isFree) ? qt : null;\n    }\n    tryScheduleQTick(location: vec3, delay: number, priority: number, onCompleted: (QTick) => void, customData?: any): boolean {\n        const qt = this.qtickGrid.getOrCreate(location);\n\n        if (!qt.isFree) {\n            return false;\n        }\n        qt.priority = priority;\n        qt.delay = delay;\n        qt.onCompleted = onCompleted;\n        qt.grid = this.grid;\n        qt.customData = customData;\n        qt.isFree = false;\n        this.activeQticks.push(qt);\n\n        return true;\n        // for (let i = this.queuedTickIndex; i <= this.queuedTicks.length; i++) {\n        //     let qt = this.queuedTicks[i];\n        //     if (!qt) {\n        //         qt = new QTick();\n        //         qt.id = i + 1;\n        //         if (qt.id > 65535)\n        //             throw new Error('Exceeded QTick limit');\n        //         this.queuedTicks[i] = qt;\n        //     }\n        //     if (qt.isFree) {\n        //         this.queuedTickLength = max(this.queuedTickLength, i + 1);\n        //         return qt;\n        //     }\n        // }\n        // // QTick should be created by now\n        // throw new Error('this shouldn\\'t happen');\n    }\n    tryCancelQTick(location: vec3): boolean {\n        const qt = this.qtickGrid.getOrCreate(location);\n        if (qt.isFree) {\n            return false;\n        }\n        qt.isFree = true;\n        this.activeQticks.remove(qt);\n        return true;\n    }\n    // findQTick(id: number): QTick | null {\n    //     const index = id - 1;\n    //     if (index < 1 || index > this.queuedTickLength) return null;\n    //     const qt = this.queuedTicks[index];\n    //     return !qt.isFree ? qt : null;\n    // }\n    _doRedstoneTick() {\n        const temp = this.tempVec3;\n        const out = this.tempOut;\n        for (let i = 0; i < this.blockUpdateLength; i++) {\n            // Perform the block update\n            const bu = this.blockUpdatePool[i];\n\n            if (bu.needsSet) {\n                throw new Error('Block update was retrieved from the pool but wasn\\'t setup corrctly');\n            }\n\n            // Call handleNeighborUpdate on each adjacent block\n            for (let j = 0; j < bu.updateOrder.length; j++) {\n                vec3.add(temp, bu.location, bu.updateOrder[j]);\n                Grid.getN(this.grid, temp, out);\n                try {\n                    if (out[0])\n                        out[0].handleNeighborUpdate(this.grid, temp, out[1], this);\n                } catch (e) {\n                    console.error(e);\n                }\n            }\n        }\n        this.blockUpdateLength = 0;\n    }\n    _installGridHooks() {\n        // Trigger block updates when blocks are placed or destroyed\n        this.grid.onSet = (coords: vec3, newBlock: Block | null, newState: number,\n                oldBlock: Block | null, oldState: number) => {\n\n            this.queueBlockUpdate().set(coords, directions.x);\n            if (oldBlock) oldBlock.updateNeighbors(this.grid, coords, oldState, this);\n            if (newBlock) newBlock.updateNeighbors(this.grid, coords, newState, this);\n        };\n    }\n}\n\nconst _isOpaque = (grid: Grid, coords: vec3): boolean => {\n    const block = Grid.getBlockN(grid, coords);\n    return block && !block.isTransparent;\n};\n\nexport const getWeakPower = (grid: Grid, coords: vec3): number => {\n    // Check opaque\n    if (!_isOpaque(grid, coords)) return 0;\n\n\n    // Calculate weak power level\n    // A block is weak powered if redstone dust is on top of it or facing into it\n    // Check redstone facing into block\n    let power = 0;\n    const temp = vec3.create();\n    for (let i = 0; i < 4; i++) {\n        const dir = directions.wens[i];\n        vec3.add(temp, coords, dir);\n        const block = Grid.getBlockN(grid, temp);\n        if (block !== blocks.dust) continue;\n        const state = Grid.getStateN(grid, temp);\n        vec3.negate(temp, dir);\n        if (!blocks.dust.isFacing(state, temp)) continue;\n        power = max(power, blocks.dust.getPower(state));\n    }\n    // Check redstone on top of block\n    vec3.add(temp, coords, directions.up);\n    const block = Grid.getBlockN(grid, temp);\n    if (block === blocks.dust) {\n        const state = Grid.getStateN(grid, temp);\n        power = max(power, blocks.dust.getPower(state));\n    }\n\n    return power;\n};\n\nexport const getStrongPower = (grid: Grid, coords: vec3): number => {\n    // Check opaque\n    if (!_isOpaque(grid, coords)) return 0;\n\n    // Calculate strong power level\n    let power = 0;\n    \n    // Redstone torch can strong-power blocks from below\n    const below = vec3.create();\n    vec3.add(below, coords, directions.down);\n    const belowBlock = Grid.getBlockN(grid, below);\n    if (belowBlock && belowBlock === blocks.torch) {\n        const torchState = Grid.getStateN(grid, below);\n        power = max(power, blocks.torch.getPower(torchState));\n    }\n\n    // TODO Redstone repeater/comparator\n\n    return power;\n};\n","// https://stackoverflow.com/a/48687313\nconst tuple = <T extends any[]>(...data: T): T => {\n    return data;\n};\nexport default tuple;\n","import { ReadonlyVec3 } from 'gl-matrix';\nconst { min, max } = Math;\n\nexport const clamp = (x: number, a: number, b: number): number => max(a, min(b, x));\n\nexport const lerp = (a: number, b: number, x: number): number => a + (b - a) * clamp(x, 0.0, 1.0);\n\n/** Normalizes radians to the range [-pi,pi) */\nexport const normalizeRad = (rad: number) => {\n    let a = rad % (2*Math.PI);\n    if (a >= Math.PI) a -= 2*Math.PI;\n    return a;\n}\n\n/**\n * Similar to a normal array, but provides O(1) remove-at-head capability.\n */\n// TODO unit test this\nexport class GuillotineArray<T> {\n    _data: T[];\n    _startIndex: number;\n    _lastIndexExclusive: number;\n    constructor(initialCapacity?: number) {\n        this._data = new Array(initialCapacity || 16);\n        this._startIndex = 0;\n        this._lastIndexExclusive = 0;\n    }\n    get(index: number): T | undefined {\n        const internalIndex = (index + this._startIndex) % this._data.length;\n        return this._data[internalIndex];\n    }\n    set(index: number, value: T) {\n        if (index >= this._data.length)\n            this._resize(index + 1);\n        const internalIndex = (index + this._startIndex) % this._data.length;\n        this._data[internalIndex] = value;\n        this._lastIndexExclusive++;\n        this._lastIndexExclusive %= this._data.length;\n    }\n    push(value: T) {\n        this.set(this.length(), value);\n    }\n    popHead(): T {\n        if (this._startIndex === this._lastIndexExclusive)\n            throw new Error('Array is empty');\n        const oldHead = this._data[this._startIndex];\n        this._data[this._startIndex] = undefined;\n        this._startIndex++;\n        this._startIndex %= this._data.length;\n        return oldHead;\n    }\n    length(): number {\n        let k = this._lastIndexExclusive;\n        if (k < this._startIndex) k += this._data.length;\n        return k - this._startIndex;\n    }\n    _resize(minimumCapacity: number) {\n        const newCapacity = max(this._data.length * 2, minimumCapacity);\n        const newData = new Array(newCapacity);\n        const len = this.length();\n        for (let i = 0; i < len; i++) {\n            newData[i] = this.get(i);\n        }\n        this._data = newData;\n        this._startIndex = 0;\n        this._lastIndexExclusive = len;\n    }\n}\n\ninterface LinkedListNode<T> {\n    value: T;\n    prev: LinkedListNode<T>;\n    next: LinkedListNode<T>;\n    special?: string;\n}\n\nexport interface Iterator<T> {\n    next(): T;\n    hasNext(): boolean;\n    remove(): void;\n}\n\nclass LinkedListIterator<T> implements Iterator<T> {\n    node: LinkedListNode<T>;\n    readonly onRemove: () => void;\n    constructor(onRemove: () => void) {\n        this.node = null;\n        this.onRemove = onRemove;\n    }\n    _setup(head: LinkedListNode<T>) {\n        this.node = head;\n    }\n    next(): T {\n        if (this.node.next.special) throw new Error('Reached end of list');\n        this.node = this.node.next;\n        return this.node.value;\n    }\n    hasNext(): boolean {\n        return !(this.node.next.special);\n    }\n    remove() {\n        if (this.node.special) throw new Error('To remove a node, call next(), then remove() will remove that node');\n        const prev = this.node.prev;\n        const next = this.node.next;\n        prev.next = next;\n        next.prev = prev;\n        this.onRemove();\n    }\n}\n\nexport class LinkedList<T> {\n    _length: number;\n    readonly head: LinkedListNode<T>;\n    readonly tail: LinkedListNode<T>;\n    it: LinkedListIterator<T>;\n    constructor() {\n        this._length = 0;\n        this.head = { value: null, prev: null, next: null, special: 'head' };\n        this.tail = { value: null, prev: null, next: null, special: 'tail' };\n        this.head.next = this.tail;\n        this.tail.prev = this.head;\n        this.it = new LinkedListIterator(() => this._length--);\n    }\n    get(i: number): T {\n        this._indexCheck(i);\n        let node = this.head;\n        for (let j = 0; j <= i; j++) {\n            node = node.next;\n        }\n        return node.value;\n    }\n    set(i: number, value: T): void {\n        this._indexCheck(i);\n        let node = this.head;\n        for (let j = 0; j <= i; j++) {\n            node = node.next;\n        }\n        node.value = value;\n    }\n    push(value: T): void {\n        const newNode: LinkedListNode<T> = { value, prev: this.tail.prev, next: this.tail };\n        this.tail.prev.next = newNode;\n        this.tail.prev = newNode;\n        this._length++;\n    }\n    remove(value: T): boolean {\n        const iterator = this.iterator();\n        while (iterator.hasNext()) {\n            if (iterator.next() === value) {\n                iterator.remove();\n                return true;\n            }\n        }\n        return false;\n    }\n    iterator(): Iterator<T> {\n        this.it._setup(this.head);\n        return this.it;\n    }\n    length(): number {\n        return this._length;\n    }\n    _indexCheck(i: number) {\n        if (i < 0 || i >= this._length)\n            throw new Error(`Index out of bounds: ${i}`);\n    }\n}\n\nexport const adjacentPositions: ReadonlyVec3[] = [\n    [-1,  0,  0],\n    [ 1,  0,  0],\n    [ 0, -1,  0],\n    [ 0,  1,  0],\n    [ 0,  0, -1],\n    [ 0,  0,  1]];\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './index.css';\nimport { GLRenderInfo, LayeredGridRenderer, HotbarRenderer } from './render';\nimport { Grid } from './grid';\nimport { Model, models } from './models';\nimport { vec3, mat4, ReadonlyVec3, vec4 } from 'gl-matrix';\nimport { Block, blocks } from './blocks';\nimport directions from './directions';\nimport cursor from './cursor';\nimport input from './input';\nimport imgSrc from './redstone.png';\nimport { Simulator, BlockUpdate } from './simulator';\nimport { adjacentPositions } from './util';\nimport { loadScenario } from './examples';\n\nimport testVertSrc from './test_vert.glsl';\nimport testFragSrc from './test_frag.glsl';\nimport dustVertSrc from './dust_vert.glsl';\nimport dustFragSrc from './dust_frag.glsl';\nimport cursorVertSrc from './cursor_vert.glsl';\nimport cursorFragSrc from './cursor_frag.glsl';\nimport hotbarVertSrc from './hotbar_vert.glsl';\nimport hotbarFragSrc from './hotbar_frag.glsl';\n\nvar canvas: HTMLCanvasElement = null;\nvar gl: WebGL2RenderingContext = null;\nvar grid: Grid = Grid.new([1, 1, 1]);\n\nconst { cos, sin, min, round } = Math;\n\nconst lerp = (a: number, b: number, t: number) => a * (1.0 - t) + b * t;\n\n// note: not linked to any event listeners, only updated when maximizeCanvas is called\nlet canvasResized: boolean = false;\n\nlet canvasWrapper: HTMLElement;\n\nconst maximizeCanvas = () => {\n    canvas.width = canvasWrapper.offsetWidth;\n    canvas.height = canvasWrapper.offsetHeight;\n    canvasResized = true;\n};\n\nwindow.onload = () => {\n    // DOM stuff\n    // Setup scroll-to links\n    document.querySelectorAll('a[href^=\"#scroll--\"]').forEach((a: HTMLAnchorElement) => {\n        const scrollToName = a.href.substring(a.href.indexOf('scroll--') + 'scroll--'.length);\n        a.setAttribute('href', 'javascript:void');\n\n        const scrollToElement: HTMLElement = document.getElementById(`scroll--${scrollToName}`);\n        if (!scrollToElement)\n            return;\n        scrollToElement.setAttribute('id', '');\n        a.addEventListener('click', (e) => {\n            if (scrollToElement) {\n                const container = document.querySelector('#info-bar');\n                container.scrollTop = scrollToElement.offsetTop - 10;\n\n                const highlightClass = 'highlighted-element';\n                document.querySelector(`.${highlightClass}`)?.classList?.remove(highlightClass);\n                scrollToElement.classList.add(highlightClass);\n\n                // Restart animation -- https://stackoverflow.com/a/45036752\n                scrollToElement.style.animation = 'none';\n                scrollToElement.offsetHeight;\n                scrollToElement.style.animation = null;\n            }\n        });\n    });\n    // Add 'js-loaded' class so CSS knows not to display noscript related items\n    const bodyClasses = document.getElementsByTagName('body')[0].classList;\n    bodyClasses.remove('js-fail', 'js-noscript');\n\n    input.init();\n\n    // CANVAS SETUP\n\n    canvas = document.getElementById('canvas') as HTMLCanvasElement;\n    canvasWrapper = document.querySelector('#canvas-wrapper') as HTMLElement;\n    maximizeCanvas();\n    // typescript doesn't come with definitions for ResizeObserver?\n    new (window as any).ResizeObserver(maximizeCanvas).observe(canvasWrapper);\n\n    // WEBGL SETUP\n\n    gl = window['gl'] = canvas.getContext('webgl2');\n    if (gl === null) {\n        // Abort and show \"missing WebGL 2\" message\n        bodyClasses.add('js-fail', 'js-nowebgl');\n        return;\n    }\n\n    // SHADER SOURCE GLOBALS\n    // (shaders are compiled by the separate files when needed)\n\n    window.testVertSrc = testVertSrc;\n    window.testFragSrc = testFragSrc;\n    window.dustVertSrc = dustVertSrc;\n    window.dustFragSrc = dustFragSrc;\n    window.cursorVertSrc = cursorVertSrc;\n    window.cursorFragSrc = cursorFragSrc;\n    window.hotbarVertSrc = hotbarVertSrc;\n    window.hotbarFragSrc = hotbarFragSrc;\n\n    // OPENGL SETUP\n\n    gl.clearColor(0.058, 0.063, 0.072, 1.0);\n    gl.enable(gl.CULL_FACE);\n    gl.enable(gl.DEPTH_TEST);\n    gl.cullFace(gl.BACK);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    const texture = gl.createTexture();\n\n    let modelRotation = 0.0;\n    const rotationAxis: vec3 = [ 0.2, 1.0, -0.2 ];\n    vec3.normalize(rotationAxis, rotationAxis);\n    const modelMat = mat4.create();\n    const projMat = mat4.create();\n    const cameraMat = mat4.create();\n    const mvpMat = new Float32Array(16);\n\n    const temp = vec3.create();\n    const CAMERA_SHIFT: vec3 = [ 0, 0, 7.5 ];\n    const CAM_ROTATE_X_1 = 0.15;\n    const CAM_ROTATE_X_2 = 0.15;\n    const CAM_ROTATE_Y = -0.025*0;\n\n    const ANIMATION_LENGTH = 75;\n    let animationStartTime: DOMHighResTimeStamp = 0;\n\n    const highlightBlock = vec3.create(); // whole coordinates\n    const highlightBlockStart: vec3 = vec3.create();\n    const highlightBlockAnimated = vec3.create();\n    let camTiltX = CAM_ROTATE_X_2;\n    let camTiltXStart = 0.0;\n    let camTiltXAnimated = camTiltX;\n    let camTiltY = CAM_ROTATE_Y;\n    let camTiltYStart = 0.0;\n    let camTiltYAnimated = camTiltY;\n    let camYaw = 0.0;\n    let camYawStart = 0.0;\n    let camYawAnimated = 0.0;\n\n    const VEC3_HALF: vec3 = [0.5, 0.5, 0.5];\n\n    let selectedBlock = blocks.stone;\n    let previousSelectedBlock: Block | null = null;\n    let selectedBlockTime = -100.0; // time when the current block was selected\n    let selectFaceMode = false;\n\n    // GRID / SIMULATOR INITIALIZATION, SCENARIOS\n\n    let grid: Grid;\n    let simulator: Simulator;\n\n    window['loadScenario'] = (scenarioName: string) => {\n        const result = loadScenario(scenarioName);\n        if (!result)\n            throw new Error(`Scenario \"${scenarioName}\" not found`);\n        const [sGrid, sSim] = result;\n        grid = sGrid;\n        simulator = sSim;\n\n        vec3.set(highlightBlock, 0, 0, 0);\n        camTiltX = CAM_ROTATE_X_2;\n        camTiltY = CAM_ROTATE_Y;\n        camYaw = 0;\n        selectFaceMode = false;\n    };\n    window['loadScenario']('memory-cell');\n    \n    // GRID RENDERER\n\n    const lgr = new LayeredGridRenderer();\n    lgr.setCamera([0, 0, -1], vec3.create());\n    lgr.updateModels(grid);\n\n    // CURSOR\n\n    cursor.init();\n\n    // TIMING INFO\n\n    let totalTime: DOMHighResTimeStamp = 0;\n    let lastTimestamp: DOMHighResTimeStamp | null = null;\n    const renderInfo: GLRenderInfo = { mvp: mvpMat, time: totalTime };\n    \n    // HOTBAR\n\n    const hotbarRenderer = new HotbarRenderer(blocks.blockRegistry.slice(1));\n\n    // UTILITY FUNCTIONS\n\n    const removeBlock = () => {\n        // Remove highlighted block\n        Grid.set(grid, highlightBlock, null);\n        // Check if there were any blocks mounted to this one that should also be removed\n        for (const delta of adjacentPositions) {\n            vec3.add(temp, highlightBlock, delta);\n            const adjacentBlock = Grid.getBlockN(grid, temp);\n            if (adjacentBlock && adjacentBlock.getMountedDirection) {\n                const mountedDirection = adjacentBlock.getMountedDirection(Grid.getStateN(grid, temp));\n                vec3.negate(temp, mountedDirection);\n                if (vec3.equals(temp, delta)) {\n                    vec3.add(temp, highlightBlock, delta);\n                    Grid.set(grid, temp, null);\n                }\n            }\n        }\n    };\n\n    const placeBlock = (mountingDirection: ReadonlyVec3 | null) => {\n        // Resize the grid to fit the cursor position, if necessary\n        if (!Grid.inBounds(grid, highlightBlock)) {\n            const newMin = vec3.create();\n            const newMax = vec3.create();\n            vec3.min(newMin, grid.min, highlightBlock);\n            vec3.max(newMax, grid.max, highlightBlock);\n            Grid.resize(grid, newMin, newMax);\n        }\n\n        // Place the block\n        Grid.set(grid, highlightBlock, selectedBlock, selectedBlock.getPlacedState(mountingDirection));\n    };\n    const checkValidMountPoint = (dir: ReadonlyVec3) => {\n        vec3.add(temp, highlightBlock, dir);\n        const adjacentBlock = Grid.getBlockN(grid, temp);\n        vec3.negate(temp, dir);\n        return adjacentBlock !== null && adjacentBlock.solidFaces.query(temp);\n    };\n\n    // INPUT HANDLING\n\n    const movementInput = vec3.create();\n    const processInput = (timestamp: DOMHighResTimeStamp) => {\n        input.update();\n\n        const keyA = input.keyDown['KeyA'];\n        const keyD = input.keyDown['KeyD'];\n        const keyS = input.keyDown['KeyS'];\n        const keyW = input.keyDown['KeyW'];\n        const keyQ = input.keyDown['KeyQ'];\n        const keyE = input.keyDown['KeyE'];\n        const keyShift = input.keyPressed['ShiftLeft'] || input.keyPressed['ShiftRight'];\n        const keyEscape = input.keyPressed['Escape'];\n\n        movementInput[0] = 0;\n        movementInput[1] = 0;\n        movementInput[2] = 0;\n        if (keyA && !keyShift) {\n            movementInput[0] = -cos(camYaw);\n            movementInput[2] = -sin(camYaw);\n            camTiltY = -CAM_ROTATE_Y;\n        }\n        if (keyD && !keyShift) {\n            movementInput[0] = cos(camYaw);\n            movementInput[2] = sin(camYaw);\n            camTiltY = CAM_ROTATE_Y;\n        }\n        if (keyS && !keyShift) {\n            movementInput[1]--;\n            camTiltX = CAM_ROTATE_X_1;\n        }\n        if (keyW && !keyShift) {\n            movementInput[1]++;\n            camTiltX = CAM_ROTATE_X_2;\n        }\n        if (keyQ && !keyShift) {\n            movementInput[0] = sin(camYaw);\n            movementInput[2] = -cos(camYaw);\n        }\n        if (keyE && !keyShift) {\n            movementInput[0] = -sin(camYaw);\n            movementInput[2] = cos(camYaw);\n        }\n        vec3.round(movementInput, movementInput);\n\n        if (input.keyDown['KeyZ'])\n            lgr.fadeLayers = !lgr.fadeLayers;\n\n        let rotated = false;\n        if (input.keyDown['ArrowLeft'] || (keyA && keyShift)) {\n            camYaw += 1.57079633;\n            rotated = true;\n        }\n        if (input.keyDown['ArrowRight'] || (keyD && keyShift)) {\n            camYaw -= 1.57079633;\n            rotated = true;\n        }\n        if (rotated || keyEscape) {\n            selectFaceMode = false;\n        }\n\n        for (let i = 1; i <= 9; i++) {\n            if (input.keyDown['Digit' + i] && blocks.blockRegistry[i] && selectedBlock !== blocks.blockRegistry[i]) {\n                // Select this block\n                // Record this block as the previous one selected\n                previousSelectedBlock = selectedBlock;\n                // Record the time at which this block was selected\n                selectedBlockTime = totalTime;\n                // Update the currently selected block\n                selectedBlock = blocks.blockRegistry[i];\n            }\n        }\n\n        const isPlaceInput = input.keyDown['Space'];\n\n        const hasMovementInput = !vec3.equals(movementInput, directions.none);\n        let moved: boolean = false;\n\n        // Handle input behavior -- this varies depending on the current mode\n        if (!selectFaceMode) {\n            // \"default\" mode\n            moved = hasMovementInput;\n            vec3.add(highlightBlock, highlightBlock, movementInput);\n            cursor.showAllFaces();\n\n            // Handle \"interact\" button\n            if(input.keyDown['KeyX']) {\n                // Toggle plus/dot for redstone wire\n                if (Grid.getBlockN(grid, highlightBlock) == blocks.dust) {\n                    let state = Grid.getStateN(grid, highlightBlock);\n                    // Check that dust is not connected to anything -- i.e. it's either a plus or a dot\n                    if (!(state & 0x0FF0)) {\n                        // Toggle plus/dot status\n                        const isDot: boolean = !!(state & 0x1000);\n                        state = (isDot ? 0 : 0x1000) | (state & 0x0FFF);\n                        Grid.trySetState(grid, highlightBlock, blocks.dust, state);\n                    }\n                }\n            }\n\n            // Handle place block request\n            if (isPlaceInput) {\n                const currentBlock = Grid.getBlockN(grid, highlightBlock);\n                let md = selectedBlock.mountingDirections?.filter(checkValidMountPoint);\n                if (currentBlock !== null || !md || md.length === 1) {\n                    // Can place or remove a block right away\n                    if (currentBlock) removeBlock();\n                    else placeBlock(md ? md[0] : null);\n                } else if (md.length > 1) {\n                    // Need to select a face first\n                    selectFaceMode = true;\n                    for (let i = 0; i < 6; i++) cursor.setShowFace(directions.weduns[i], false);\n                    for (let i = 0; i < md.length; i++) cursor.setShowFace(md[i], true);\n                } // If md.length===0, that means there were no valid mount points and thus can't be placed\n            }\n        } else {\n            // select face mode -- i.e. choosing which block to place a mounted block on\n            if (hasMovementInput) {\n                // Trying to place a block. The mounting direction is movementInput\n                const dir = movementInput;\n                const isValidMountDirection = directions.arrContains(selectedBlock.mountingDirections, dir);\n                const isValidMountPoint = checkValidMountPoint(dir);\n                if (isValidMountDirection && isValidMountPoint) {\n                    placeBlock(dir);\n                    selectFaceMode = false;\n                }\n            }\n\n            if (isPlaceInput)\n                selectFaceMode = false;\n        }\n\n        // Handle camera animations\n        if (moved || rotated) {\n            vec3.copy(highlightBlockStart, highlightBlockAnimated);\n            camTiltXStart = camTiltXAnimated;\n            camTiltYStart = camTiltYAnimated;\n            camYawStart = camYawAnimated;\n            animationStartTime = timestamp;\n        }\n        // Update camera animations\n        if (highlightBlockStart) {\n            const t = min((timestamp - animationStartTime) / ANIMATION_LENGTH, 1);\n            vec3.lerp(highlightBlockAnimated, highlightBlockStart, highlightBlock, t);\n            camTiltXAnimated = lerp(camTiltXStart, camTiltX, t);\n            camTiltYAnimated = lerp(camTiltYStart, camTiltY, t);\n            camYawAnimated = lerp(camYawStart, camYaw, t);\n        }\n\n        // Update grid model\n        if (moved || rotated || grid.isDirty) {\n            lgr.setCamera([ round(sin(camYaw)), 0, round(-cos(camYaw)) ], highlightBlock);\n            lgr.updateModels(grid);\n            grid.isDirty = false;\n            // TODO Right now we update EVERY model on the grid when it changes(is dirty) even\n            // if its only 1 block that changed\n            // In the future, track the blocks that changed so we only need to update those models\n        }\n    };\n\n    // GAME LOOP\n\n    let gameTickCountdown: DOMHighResTimeStamp = 0;\n    const loop = (timestamp: DOMHighResTimeStamp) => {\n        requestAnimationFrame(loop);\n\n        const delta = lastTimestamp ? (timestamp - lastTimestamp) * 0.001 : 0.01;\n        lastTimestamp = timestamp;\n        totalTime += delta;\n\n        processInput(timestamp);\n\n        gameTickCountdown -= delta;\n        if (gameTickCountdown <= 0) {\n            simulator.doGameTick();\n            gameTickCountdown = 0.05;\n        }\n\n        // Do rendering\n        // Setup mvp matrices\n        vec3.negate(temp, CAMERA_SHIFT);\n        mat4.fromTranslation(cameraMat, temp);\n        mat4.rotateX(cameraMat, cameraMat, camTiltXAnimated);\n        mat4.rotateY(cameraMat, cameraMat, camYawAnimated + camTiltYAnimated);\n        vec3.negate(temp, highlightBlockAnimated);\n        vec3.sub(temp, temp, VEC3_HALF);\n        mat4.translate(cameraMat, cameraMat, temp);\n\n        if (canvasResized) {\n            gl.viewport(0, 0, canvas.width, canvas.height);\n            mat4.perspective(projMat, 0.9, canvas.width/canvas.height, 0.1, 100);\n        }\n\n        mat4.identity(mvpMat);\n        mat4.mul(mvpMat, cameraMat, modelMat);\n        mat4.mul(mvpMat, projMat, mvpMat);\n\n        renderInfo.time = totalTime;\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        // Draw grid\n        lgr.render(renderInfo);\n\n        // Draw cursor\n        cursor.render(renderInfo, highlightBlock, Grid.getBlockN(grid, highlightBlock) || selectFaceMode ? 1.0 : 0.35);\n\n        // Draw hotbar\n        hotbarRenderer.render(totalTime, delta,\n            canvas.width, canvas.height,\n            selectedBlock, previousSelectedBlock, selectedBlockTime);\n\n        canvasResized = false;\n    };\n    const image = new Image();\n    image.src = imgSrc;\n    image.onload = () => {\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, image.width, image.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, image);\n        gl.generateMipmap(gl.TEXTURE_2D);\n        loop(performance.now());\n    };\n};\n"],"sourceRoot":""}